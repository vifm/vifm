.TH vifm 1 "January 29, 2012" "" "Vifm"
.\" ---------------------------------------------------------------------------
.SH NAME
.\" ---------------------------------------------------------------------------
vifm [OPTION]
.\" ---------------------------------------------------------------------------
.SH DESCRIPTION
.\" ---------------------------------------------------------------------------
Vifm is a ncurses based file manager with vi like keybindings. If you use vi,
vifm gives you complete keyboard control over your files without having to learn
a new set of commands.
.\" ---------------------------------------------------------------------------
.SH OPTIONS
.\" ---------------------------------------------------------------------------
The vifm executable will start vifm in the current directory unless it is
given a different directory on the command line.
.TP
.BI <lwinpath>
Starts Vifm in the specified path.
.TP
.BI "<lwinpath> <rwinpath>"
Starts Vifm in the specified paths.
.LP
Paths to files are also allowed in case you want vifm to start with some
archive opened.  If you want to select file, prepend its path with --select.
.TP
.BI -f
only used from the vifm.vim script.  The selected files are written
to $VIFM/vimfiles and vifm exits.
.TP
.BI "--logging"
Log some errors to $VIFM/log.
Also /var/log/vifm-startup-log (on *nix) and startup-log in the directory of
executable (on Windows) is used to log startup process (when configuration
directory isn't determined).
.TP
.BI "--remote"
Passes all arguments that left in command line to active vifm server (already
running instance if any).
.TP
.BI "-c <command> or +<command>"
Run <command> on startup.
.TP
.BI "--help, -h"
Show an overview of the commandline options.
.TP
.BI "--version, -v"
Show version information and quit.
.TP
.BI --no-configs
Don't read vifmrc and vifminfo.

.LP
See Startup section below for the explanations on $VIFM.
.br
.\" ---------------------------------------------------------------------------
.SH General keys
.\" ---------------------------------------------------------------------------
.TP
.BI "Ctrl-C or Escape"
cancel most operations.
.TP
.BI "Ctrl-C or Escape"
clear all selected files.
.TP
.BI Ctrl-L
clear and redraw the screen.
.\" ---------------------------------------------------------------------------
.SH Basic Movement
.\" ---------------------------------------------------------------------------
The basic vi key bindings are used to move through the files and popup windows.
.TP
.BI "k or Ctrl-P"
moves up.
.TP
.BI "j or Ctrl-N"
moves down.
.TP
.BI h
moves up one directory.
.TP
.BI "l or Enter"
moves into a directory or launches a file.
.TP
.BI gg
move to the top of the file list.
.TP
.BI G
move to the bottom of the file list.
.TP
.BI H
move to the first file in the window.
.TP
.BI M
move to the file in the middle of the window.
.TP
.BI L
move to the last file in the window.
.TP
.BI "Ctrl-F or Page Down"
move forward one page.
.TP
.BI "Ctrl-B or Page Up"
move back one page.
.TP
.BI Ctrl-D
jump back one half page.
.TP
.BI Ctrl-U
jump forward one half page.
.TP
.BI n%
move to the file that is n percent from the top of the list (for example 25%).
.TP
.BI "Space Bar or Tab Key"
toggles between the two file lists.
.\" ---------------------------------------------------------------------------
.SH Movement with Count
.\" ---------------------------------------------------------------------------
.TP
Most movement commands also accept a count, 12j would move down 12 files.
.TP
.BI [count]%
move to percent of the file list.
.TP
.BI [count]j
move down count files.
.TP
.BI [count]k
move up count files.
.TP
.BI "[count]G or [count]gg"
move to list position count.
.\" ---------------------------------------------------------------------------
.SH Scrolling panes
.\" ---------------------------------------------------------------------------
.TP
.BI zt
redraw pane with file in top of list.
.TP
.BI zz
redraw pane with file in center of list.
.TP
.BI zb
redraw pane with file in bottom of list.
.TP
.BI Ctrl-E
scroll pane one line down.
.TP
.BI Ctrl-Y
scroll pane one line up.
.\" ---------------------------------------------------------------------------
.SH Pane manipulation
.\" ---------------------------------------------------------------------------
Second character can be entered with or without Control key.
.TP
.BI "Ctrl-W H"
switch to the left pane.
.TP
.BI "Ctrl-W J"
switch to the pane below.
.TP
.BI "Ctrl-W K"
switch to the pane above.
.TP
.BI "Ctrl-W L"
switch to the right pane.
.TP
.BI "Ctrl-W O"
shortcut for :only
.TP
.BI "Ctrl-W S"
shortcut for :split
.TP
.BI "Ctrl-W V"
shortcut for :vsplit
.TP
.BI "Ctrl-W W"
switch to other pane.
.TP
.BI "Ctrl-W X"
exchange panes.
.TP
.BI "Ctrl-W +"
increase size of the view.
.TP
.BI "Ctrl-W -"
decrease size of the view.
.TP
.BI "Ctrl-W <"
increase size of the view.
.TP
.BI "Ctrl-W >"
decrease size of the view.
.TP
.BI "Ctrl-W |"
maximize current view.
.TP
.BI "Ctrl-W _"
maximize current view.
.TP
.BI "Ctrl-W ="
make size of two views equal.
.\" ---------------------------------------------------------------------------
.SH Marks
.\" ---------------------------------------------------------------------------
.TP
Marks are set the same way as they are in vi.
.br
You can use this characters for marks [a-z][A-Z][0-9].
.TP
.BI m[a-z][A-Z][0-9]
to set a mark for the current file.
.TP
.BI '[a-z][A-Z][0-9]
moves to the file set for the mark.
.\" ---------------------------------------------------------------------------
.SH Searching
.\" ---------------------------------------------------------------------------
.TP
.BI "/regular expression pattern[Return]"
will highlight all files matching the pattern and go to the next match.
.TP
.BI "?regular expression pattern[Return]"
will highlight all files matching the pattern and go to the previous match.
.TP
.BI [count]n
find the next match of / or ?.
.TP
.BI [count]N
find the previous match of / or ?.
.TP
.BI [count]f[character]
search forward for file with [character] as first character in name.  Search
wraps around the end of the list.
.TP
.BI [count]F[character]
search backward for file with [character] as first character in name.  Search
wraps around the end of the list.
.TP
.BI [count];
find the next match of f or F.
.TP
.BI [count],
find the previous match of f or F.
.LP
Note: f, F, ; and , wrap around list beginning and end when they are used
alone and they don't wrap when they are used as selectors.
.\" ---------------------------------------------------------------------------
.SH File Filters
.\" ---------------------------------------------------------------------------
The basic vim folding key bindings are used for filtering files.
.TP
All directorys will show the ../ file no matter what the filter setting is with the exception of the / directory.
.TP
Each file list has its own filter.
.TP
Filtered files are not checked in / search or :commands.
.TP
.BI zo
Show all of the dot files.
.TP
.BI zf
Filter all of the selected files.
.TP
.BI za
Toggle the showing and hiding of dot files.
.TP
.BI zm
Filter all of the dot files.
.TP
.BI zO
Show the filtered files.
.TP
.BI zM
Filter the files matching the filename filter.
.TP
.BI zR
Remove all filters.
.\" ---------------------------------------------------------------------------
.SH Other Normal Mode Keys
.\" ---------------------------------------------------------------------------
.TP
.BI [count]:
enter command line mode.  Count will add range.
.TP
.BI "[count]!! and [count]!<selector>"
enter command line mode with entered ! command.  Count will modify range.
.TP
.BI Ctrl-O
go backward through history.
.TP
.BI Ctrl-I
go forward through history.
.TP
.BI Ctrl-G
creates a window showing detailed information about the current file.
.TP
.BI "Shift-Tab"
enters view mode (works only after activating view pane with :view command).
.TP
.BI ga
calculate directory size.
.TP
.BI gA
like ga, but force update.
.TP
.BI gf
find link destination (like l with 'followlinks' off, but also finds
directories).
.TP
.BI gl
only for MS-Windows
.br
same as l key, but tries to run program with administrative privileges.
.TP
.BI gv
go to visual mode restoring last selection.
.TP
.BI gs
restore last t selection, like gv for visual mode selection.
.TP
.BI gu<selector>
make names of selected files lowercase.
.TP
.BI guu
.BI gugu
make name of current file lowercase.
.TP
.BI gU<selector>
make names of selected files uppercase.
.TP
.BI gUU
.BI gUgU
make name of current file uppercase.
.TP
.BI e
explore file in the current pane.
.TP
.BI i
opens file with associated program even if it's an executable.
.TP
.BI cw
rename a file or files.
.TP
.BI cW
change only name of file (without extension).
.TP
.BI cl
change link target.
.TP
.BI co
only for *nix
.br
change file owner.
.TP
.BI cg
only for *nix
.br
change file group.
.TP
.BI cp
change file attributes (permission on *nix and properties on Windows).
.TP
.BI [count]C
clone file [count] times.
.TP
.BI "[count]dd or d[count]selector"
moves the selected files to the trash directory (if option 'trash' is set
otherwise delete)
.TP
.BI "[count]DD or D[count]selector"
removes the selected files.
.TP
.BI "Y, [count]yy or y[count]selector"
yanks the selected files.
.TP
.BI Y
same as yy.
.TP
.BI p
will copy the yanked files to the current directory or move the files
to the current directory if they were deleted with dd or :d[elete] or if the
files were yanked from the Trash directory.
.TP
.BI P
moves the last yanked files.  The advantage of using P instead of d followed by
p is that P moves files only once.  This isn't important in case you're moving
files in the same file system where your home directory is, but using P to
move files on some other file system (or file systems, in case you want to move
files from fs1 to fs2 and your home is on fs3) can save your time.
.TP
.BI al
puts symbolic links with absolute paths.
.TP
.BI rl
puts symbolic links with relative paths.
.TP
.BI t
tag the current file.
.TP
.BI u
undo last change.
.TP
.BI Ctrl-R
redo last change.
.TP
.BI v
enter visual mode.
.TP
.BI V
enter visual mode.
.TP
.BI [count]Ctrl-A
increment first number in file name by count (1 by default).
.TP
.BI [count]Ctrl-X
decrement first number in file name by count (1 by default).
.TP
.BI ZQ
same as :quit!
.TP
.BI ZZ
same as :quit
.TP
.BI .
repeat last command line command (not normal mode command).
.TP
.BI (
goto previous group.  Groups are defined by primary sorting key.  For name and
iname members of each group have same first letter, for all other sorting keys
vifm uses size, uid, ...
.TP
.BI )
goto next group.  See ( key description above.
.\" ---------------------------------------------------------------------------
.SH Using Count
.\" ---------------------------------------------------------------------------
.TP
You can use count with commands like yy.
.TP
.BI [count]yy
yank count files starting from current cursor position downward.
.TP
Or you can use count with motions passed to y, d or D.
.TP
.BI d[count]j
delete (count + 1) files starting from current cursor position upward.
.\" ---------------------------------------------------------------------------
.SH Registers
.\" ---------------------------------------------------------------------------
.LP
vifm supports multiple registers for temporary storing list of yanked or
deleted files.

Registers should be specified with hitting double quite key followed by a
register name.  Count is specified after register name.  By default commands use
unnamed register, which has double quote as its name.

Though all commands accept registers, most of commands ignores them (for example
H or Ctrl-U).  Other commands can fill register or append new files to it.

Presently vifm supports ", _, a-z and A-Z characters as register names.

As mentioned above " is unnamed register and has special meaning of the default
register.  Every time when you use named registers (a-z and A-Z) unnamed
register is updated to contain same list of files as the last used register.

_ is black hole register.  It can be used for writing, but its list is always
empty.

Registers with names from a to z  and from A to Z are named ones.  Lowercase
registers are cleared before adding new files, while uppercase aren't and should
be used to append new files to the existing file list of appropriate lowercase
register (A for a, B for b, ...).

Registers can be changed on :empty command if they contain files under Trash
directory.

Registers do not contain one file more than once.

Example:
  "a2yy
.br
will put names of two files to register a (and to the unnamed register).
  "Ad
.br
will remove one file and append its name to register a (and to the unnamed
register).
  p or "ap or "Ap
.br
will insert previously yanked and deleted files into current directory.
.\" ---------------------------------------------------------------------------
.SH Selectors
.\" ---------------------------------------------------------------------------
.TP
y and d commands accept selectors.  You can combine them with every of
selectors below to quickly remove or yank several files.
.br
Most of selectors are like vi motions: j, k, gg, G, H, L, M, %, f, F, ;, comma
and '.  But there are some additional ones.
.TP
.BI a
all files in current view.
.TP
.BI s
selected files.
.TP
.BI S
all files except selected.
.\" ---------------------------------------------------------------------------
.SH Visual Mode
.\" ---------------------------------------------------------------------------
In visual mode work almost all normal mode keys, but they do not accept
selectors.
.TP
.BI Enter
save selection and go back to normal mode.
.TP
.BI gv
restore previous visual selection.
.TP
.BI v
leave visual mode.
.TP
.BI V
leave visual mode.
.TP
.BI :
enter command line mode.  When you leave it selection will be cleared.
.TP
.BI o
switch active selection bound.
.TP
.BI O
switch active selection bound.
.TP
.BI "gu, u"
make names of selected files lowercase.
.TP
.BI "gU, U"
make names of selected files uppercase.
.\" ---------------------------------------------------------------------------
.SH View Mode
.\" ---------------------------------------------------------------------------
This mode tries to imitate the less program. Currently the following keys are
supported:
.TP
.BI "Shift-Tab, Tab, q, Q, ZZ"
go back to normal mode.
.TP
.BI "[count]e, [count]Ctrl-E, [count]j, [count]Ctrl-N, [count]Enter"
forward one line (or [count] lines).
.TP
.BI "[count]y, [count]Ctrl-Y, [count]k, [count]Ctrl-K, [count]Ctrl-P"
backward one line (or [count] lines).
.TP
.BI "[count]f, [count]Ctrl-F, [count]Ctrl-V, [count]Space Bar"
forward one window (or [count] lines).
.TP
.BI "[count]b, [count]Ctrl-B, [count]Alt-V"
backward one window (or [count] lines).
.TP
.BI [count]z
forward one window (and set window to [count]).
.TP
.BI [count]w
backward one window (and set window to [count]).
.TP
.BI [count]Alt-Space
forward one window, but don't stop at end-of-file.
.TP
.BI "[count]d, [count]Ctrl-D"
forward one half-window (and set half-window to [count]).
.TP
.BI "[count]u, [count]Ctrl-U"
backward one half-window (and set half-window to [count]).
.TP
.BI "r, Ctrl-R, Ctrl-L, R"
repaint screen.
.TP
.BI [count]/pattern
search forward for ([count]-th) matching line.
.TP
.BI [count]?pattern
search backward for ([count]-th) matching line.
.TP
.BI [count]n
repeat previous search (for [count]-th occurrence).
.TP
.BI [count]N
repeat previous search in reverse direction.
.TP
.BI "[count]g, [count]<, [count]Alt-<"
go to first line in file (or line [count]).
.TP
.BI "[count]G, [count]>, [count]Alt->"
go to last line in file (or line [count]).
.TP
.BI "[count]p, [count]%"
go to beginning of file (or N percent into file).
.TP
.BI v
edit the current file with vim.
.TP
.BI "Ctrl-W S"
split window horizontally.
.TP
.BI "Ctrl-W V"
split window vertically.
.TP
.BI "Ctrl-W +"
increase size of the view.
.TP
.BI "Ctrl-W -"
decrease size of the view.
.TP
.BI "Ctrl-W <"
increase size of the view.
.TP
.BI "Ctrl-W >"
decrease size of the view.
.TP
.BI "Ctrl-W |"
maximize current view.
.TP
.BI "Ctrl-W _"
maximize current view.
.TP
.BI "Ctrl-W ="
make size of two views equal.
.\" ---------------------------------------------------------------------------
.SH Command line Mode
.\" ---------------------------------------------------------------------------
This keys apply to all submodes of the command line mode: command, prompt and
search.
.LP
Down, Up, Left, Right, Home, End and Delete are extended keys and they are not
available if vifm is compiled with --disable-extended-keys option
.TP
.BI "Esc, Ctrl-C"
leave command line mode, cancels input.
.TP
.BI "Ctrl-M, Enter"
execute command and leave command line mode.
.TP
.BI "Ctrl-I, Tab"
complete command or its argument.
.TP
.BI Shift-Tab
complete in reverse order.
.TP
.BI Ctrl-_
stop completion and return original input.
.TP
.BI Ctrl-K
remove characters from cursor position till the end of line.
.TP
.BI Ctrl-U
remove characters from cursor position till the beginning of line.
.TP
.BI "Ctrl-H, Backspace"
remove character before the cursor.
.TP
.BI "Ctrl-D, Delete"
remove character under the cursor.
.TP
.BI "Ctrl-B, Left"
move cursor to the left.
.TP
.BI "Ctrl-F, Right"
move cursor to the right.
.TP
.BI "Ctrl-A, Home"
go to line beginning.
.TP
.BI "Ctrl-E, End"
go to line end
.TP
.BI Alt-B
go to the beginning of previous word.
.TP
.BI Alt-F
go to the end of next word.
.TP
.BI Ctrl-W
remove characters from cursor position till the beginning of previous word.
.TP
.BI Alt-D
remove characters from cursor position till the beginning of next word.
.TP
.BI Ctrl-N
recall more recent command-line from history.
.TP
.BI Ctrl-P
recall older command-line from history.
.TP
.BI Up
recall more recent command-line from history, that begins as the current
command-line.
.TP
.BI Down
recall older command-line from history, that begins as the current command-line.
.\" ---------------------------------------------------------------------------
.SH Commands
.\" ---------------------------------------------------------------------------
Commands are executed with :command_name<Return>

\'|' can be used to separate commands, so you can give multiple commands in one
line.  If you want to use '|' in an argument, precede it with '\\'.

Commented out lines should start with the double quote symbol, which may be
preceded by whitespace characters.
.TP
.BI :[count]
.TP
.BI :number
move to the file number.
.br
:12 would move to the 12th file in the list.
.br
:0 move to the top of the list.
.br
:$ move to the bottom of the list.
.TP
.BI :[count]command
The only builtin :[count]command are :[count]d[elete] and :[count]y[ank].
.TP
.BI :d3
would delete three files starting at the current file position moving down.
.TP
.BI :3d
would delete one file at the third line in the list.
.TP
.BI ":command [args]"
.TP
.BI :[range]!program
will execute the program in a shell
.TP
.BI ":[range]!command &"
.LP
will run the process in the background using vifm's means.

Programs that write to stdout like ls will create an error message
showing partial output of the command.

Take note of the space before ampersand symbol, if you omit it, command
will be run in the background using job control of your shell.

Accepts macros.
.TP
.BI ":[range]!! <program>"
is the same as :! but will pause the screen before returning to Vifm.
.TP
.BI :!!
will execute the last command.
.TP
.BI :[range]alink[!?]
creates absolute symbolic links of files in directory of other view.  With "?"
vifm will open vi to edit filenames.  "!" forces overwrite.
.TP
.BI ":[range]alink[!] path"
creates absolute symbolic links of files in directory specified with the path
(absolute or relative to directory of other view).  "!" forces overwrite.
.TP
.BI ":[range]alink[!] name1 name2..."
creates absolute symbolic links of files in directory of other view giving each
next link a corresponding name from the argument list.  "!" forces overwrite.
.TP
.BI ":apropos manpage"
will create a menu of items returned by the apropos command. Selecting an item
in the menu will open the corresponding manpage.
.TP
.BI :apropos
repeats last :apropos command.
.TP
.BI ":cd or :cd ~ or :cd $HOME"
change to your home directory.
.TP
.BI ":cd -"
go to previous directory.
.TP
.BI ":cd ~/dir"
change directory to ~/dir.
.TP
.BI ":cd /curr/dir /other/dir"
change directory of the current pane to /curr/dir and directory of the other
pane to /other/dir.  When using relative paths vifm assumes that both of them
are relative to current directory of current view.  Command will not fail if one
of directories is invalid.
Accepts macros.
.TP
.BI ":cd! /dir"
same as :cd /dir /dir.
.TP
.BI :c[hange]
create a menu window to alter a files properties.
.TP
.BI :[range]chmod
.br
shows file attributes (permission on *nix and properties on Windows) change
dialog.
.TP
.BI ":[range]chmod[!] arg..."
only for *nix
.br
changes permissions for files.  See 'man chmod' for arg format.  "!" means set
permissions recursively.
.TP
.BI :[range]chown
only for *nix
.br
same as co key in normal mode.
.TP
.BI ":[range]chown [user][:][group]"
only for *nix
.br
changes owner and/or group of files.  Operates on directories recursively.
.TP
.BI :[range]clone[!?]
clones files in current directory.  With "?" vifm will open vi to edit
filenames.  "!" forces overwrite.
.TP
.BI ":[range]clone[!] path"
clones files to directory specified with the path (absolute or relative to
current directory).  "!" forces overwrite.
.TP
.BI ":[range]clone[!] name1 name2..."
clones files in current directory giving each next clone a corresponding name
from the argument list.  "!" forces overwrite.
.TP
.BI :colo[rscheme]?
prints current color scheme name in the status bar.
.TP
.BI :colo[rscheme]
gives a menu with a list of available color schemes.  You can choose default
color scheme here.  It will be used for view if no DIRECTORY in colorscheme
file fits current path.  It's also used to set border color (except view titles)
and colors in the menus and dialogs.
.TP
.BI ":colo[rscheme] color_scheme_name"
changes default color scheme to color_scheme_name.
.TP
.BI ":colo[rscheme] color_scheme_name directory"
associates directory with the color scheme.
.TP
.BI :comc[lear]
removes all user defined commands.
.TP
.BI :com[mand]
gives a menu of user commands.
.TP
.BI ":com[mand] beginning"
shows user defined commands that start with the beginning.
.TP
.BI ":com[mand] name action"
sets a new user command.
.br
Trying to use a reserved command name will result in an error message.
.br
Use :com[mand]! to overwrite a previously set command.
.br
Unlike vim user commands do not have to start with a capital letter.
User commands are run in a shell by default.  To run a command in
the background you must set it as a background command with & at the end
of the commands action (:com rm rm %f &).  Command name cannot contain
numbers or special symbols (except '?' and '!').
.TP
.BI ":com[mand] backup /pattern"
will set search pattern.
.TP
.BI ":com[mand] name filter pattern"
will set file name filter.
.TP
.BI ":com[mand] cmd :commands"
will set kind of alias for internal command (like in a shell).
.TP
.BI ":[range]co[py][!?][ &]"
copies files to directory of other view.  With "?" vifm will open vi to edit
filenames.  "!" forces overwrite.
.TP
.BI ":[range]co[py][!] path[ &]"
copies files to directory specified with the path (absolute or relative to
directory of other view).  "!" forces overwrite.
.TP
.BI ":[range]co[py][!] name1 name2...[ &]"
copies files to directory of other view giving each next file a corresponding
name from the argument list.  "!" forces overwrite.
.TP
.BI ":[range]d[elete][!][ &]"
delete selected file or files.  "!" means completely remove file.
.TP
.BI ":[range]d[elete][!] [reg] [count][ &]"
will delete files to the reg register.  "!" means completely remove file.
.TP
.BI ":delc[ommand] command_name"
will remove the command_name user command.
.TP
.BI :delm[arks]!
will delete all marks.
.TP
.BI ":delm[arks] marks ..."
will delete specified marks, each argument is treated as a set of marks.
.TP
.BI :di[splay]
popup menu with registers content.
.TP
.BI ":di[splay] list ..."
display the contents of the numbered and named registers that are mentioned in
list (for example "az to display "", "a and "z content).
.TP
.BI :dirs
display directory stack.
.TP
.BI ":[range]e[dit] [file...]"
will load the selected or passed file or files into vi.  Accepts macros.
.TP
.BI :empty
will permanently remove 'rm -fr' files from the Trash directory.  It will also
remove all operations from undolist that have no sense after :empty and remove
all records about files in the Trash directory from all registers.
.TP
.BI :exe[cute] [arg...]
will join all passed arguments by inserting a single space between them and
execute resulting string as a command-line command.
.TP
.BI :exi[t][!]
same as :quit.
.TP
.BI :f[ile]
popup menu of programs set for the file type of the current file. Add ' &' at
the end of command to run program in background.
.TP
.BI ":f[ile] arg"
run associated command that begins with the arg without opening menu.
.TP
.BI ":filet[ype] pat1,pat2,... def_program,program2,..."
will associate given program list to each of the patterns.  Accosiated program
(command) is used by handlers of l and Enter keys (and also in the :file menu).
*, ?, [ and ] are treated as special symbols in the pattern.  Inside square
brackets ^ or ! can be used for symbol class negotiation and the - symbol to
set a range.  Asterisk at the pattern beginning don't accept dot as the first
character.  If you need to insert comma into command just double it (",,").
.TP
.BI ":filex[type] pat1,pat2,... def_program,program2,..."
same as :filetype, but vifm will ignore this command if it's not running in X.
In X :filextype is equal to :filetype.
.TP
.BI ":filev[iewer] pat1,pat2,... command"
will associate given command as a viewer to each of the patterns.  Viewer is a
command which output is captured and showed in the second pane of vifm after
running :view command.  Currently only * and ? are treated as special symbols in
the pattern.
.TP
.BI ":filter regular_expression_pattern"
.BI ":filter /regular_expression_pattern/"
will filter all the files out of the directory listing that match the regular
expression.  Using second variant you can use | symbol without escaping.  Add
'!' to invert filter.
.br
:filter /\.o$ would filter all files ending in .o from the filelist.
.br
Note: vifm uses extended regular expressions.
.TP
.BI ":filter"
would filter no files from the filelist.
.TP
.BI ":filter!"
same as :invert.
.TP
.BI :filter?
show current filter value.
.TP
.BI ":[range]fin[d] pattern"
will show results of find command in the menu.  Searches among selected files if
any.  Accepts macros.
.TP
.BI ":[range]fin[d] -opt..."
same as :find above, but user defines all find arguments.  Searches among
selected files if any.
.TP
.BI ":[range]fin[d] path -opt..."
same as :find above, but user defines all find arguments.  Ignores selection and
range.
.TP
.BI :[range]fin[d]
repeats last :find command.
.TP
.BI ":[range]gr[ep][!] pattern"
will show results of grep command in the menu.  Add "!" to search lines that do
not match pattern.  Searches among selected files if any and no range given.
Ignores binary files.
.TP
.BI ":[range]gr[ep][!] -opt..."
same as :grep above, but user defines all find arguments, which are not escaped.
Searches among selected files if any.
.TP
.BI :[range]gr[ep][!]
repeats last :grep command.  "!" of this command inverts "!" in repeated
command.
.TP
.BI :h[elp]
show the help file.
.TP
.BI ":h[elp] argument"
is the same as using ':h argument' in vim.  Use vifm-<something> to get help
on vifm (tab completion works).
.TP
.BI :hi[ghlight]
will show information about all highlight groups in the current directory.
.TP
.BI ":hi[ghlight] group-name"
will show information on given highlight group of the default color scheme.
.TP
.BI ":hi[ghlight] group-name cterm=style | ctermfg=color | ctermbg=color"
sets style (cterm), foreground (ctermfg) or/and background (ctermbg) parameters
of highlight group of the current default color scheme.
.LP
Available style values (some of them can be combined):
 - bold
 - underline
 - reverse or inverse
 - standout
 - none

Available group-name values:
 - Win - color of all windows (views, dialogs, menus)
 - Border - color of vertical parts of the border
 - TopLineSel - top line color of the current pane
 - TopLine - top line color of the other pane
 - CmdLine - the command line/status bar color
 - ErrorMsg - color of error messages in the status bar
 - StatusLine - color of the line above the status bar
 - WildMenu - color of the wild menu items
 - CurrLine - line at cursor position in the view
 - Selected - color of selected files
 - Directory - color of directories
 - Link - color of symbolic links in the views
 - BrokenLink - color of broken symbolic links
 - Socket - color of sockets
 - Device - color of block and character devices
 - Executable - color of executable files
 - Fifo - color of fifo pipes

Available colors:
 - -1 or default or none - default or transparent
 - black
 - red
 - green
 - yellow
 - blue
 - magenta
 - cyan
 - white

Here is the hierarchy of the highlight group, which you need to know for using
transparency:
  StatusLine
    WildMenu
  Border
  CmdLine
    ErrorMsg
  Win
    Directory
    Link
    BrokenLink
    Socket
    Device
    Fifo
    Executable
      Selected
        CurrLine
  TopLine
    TopLineSel

"none" means default terminal color for highlight groups at the first level of
the hierarchy and transparency for all others.
.TP
.BI :his[tory]
creates a popup menu of directories visited.
.TP
.BI ":his[tory] x"
x can be:
.br
d[ir]     or .  show directory history.
.br
i[nput]   or @  show prompt history (e.g. on one file renaming).
.br
s[earch]  or /  show search history and search forward on l key.
.br
f[search] or /  show search history and search forward on l key.
.br
b[search] or ?  show search history and search backward on l key.
.br
c[md]     or :  show command line history.
.TP
.BI :invert
invert file name filter.
.TP
.BI :invert?
show current filter state.
.TP
.BI :jobs
shows menu of current backgrounded processes.
.TP
.BI ":let $ENV_VAR = 'VALUE'"
sets environment variable.  Warning: setting environment variable to an empty
string on Windows removes it.
.TP
.BI ":let $ENV_VAR .= 'VALUE'"
append value to environment variable.
.TP
.BI ":locate filename"
uses the locate command to create a menu of filenames
Selecting a file from the menu will reload the current file list in vifm
to show the selected file.
.TP
.BI :locate
repeats last :locate command.
.TP
.BI :[range]ma[rk][?] x [/full/path] [filename]
Set mark x (a-zA-Z0-9) at /full/path and filename.  By default current directory
is being used.  If no filename was given and /full/path is current directory
then last file in [range] is used.  Using macros is allowed.  Question mark
will stop command from overwriting existing marks.
.TP
.BI :marks
create a popup menu of bookmarks.
.TP
.BI ":marks list ..."
display the contents of the marks that are mentioned in list.
.TP
.BI ":mes[sages]
shows previously given messages (up to 50).
.TP
.BI ":mkdir[!] dir ..."
creates directories with given names.  "!" means make parent directories as
needed.
.TP
.BI ":[range]m[ove][!?][ &]"
moves files to directory of other view.  With "?" vifm will open vi to edit
filenames.  "!" forces overwrite.
.TP
.BI ":[range]m[ove][!] path[ &]"
moves files to directory specified with the path (absolute or relative to
directory of other view).  "!" forces overwrite.
.TP
.BI ":[range]m[ove][!] name1 name2...[ &]"
moves files to directory of other view giving each next file a corresponding
name from the argument list.  "!" forces overwrite.
.TP
.BI :noh[lsearch]
clear selection in current pane.
.TP
.BI :on[ly]
changes the window to show only the current file directory.
.TP
.BI :popd
remove pane directories from stack.
.TP
.BI ":pushd[!] /curr/dir [/other/dir]"
add pane directories to stack and process arguments like :cd command.
.TP
.BI :pushd
exchanges the top two items of the directory stack.
.TP
.BI :pw[d]
show the present working directory.
.TP
.BI :q[uit][!]
will exit vifm (add ! if you don't want to save changes or check if there are
any of backgrounded commands still running).
.TP
.BI ":[range]y[ank] [reg] [count]"
will yank files to the reg register.
.TP
.BI :ls
shows list of screen program windows (only when screen is used).
.TP
.BI :reg[isters]
popup menu with registers content.
.TP
.BI ":reg[isters] list ..."
display the contents of the numbered and named registers that are mentioned in
list (for example "az to display "", "a and "z content).
.TP
.BI :[range]rename[!]
rename files using vi to edit names. ! means go recursively through directories.
.TP
.BI ":[range]rename name1 name2..."
rename each of selected files to a corresponding name.
.TP
.BI :restart
will free a lot of things (histories, commands, etc.), reread vifminfo and
vifmrc files and run startup commands passed in the argument list, thus losing
all unsaved changes (e.g. recent history or keys mapped in current session).
.TP
.BI :[range]restore
will restore file from Trash.  Works in trash directory only.
.TP
.BI :[range]rlink[!?]
creates relative symbolic links of files in directory of other view.  With "?"
vifm will open vi to edit filenames.  "!" forces overwrite.
.TP
.BI ":[range]rlink[!] path"
creates relative symbolic links of files in directory specified with the path
(absolute or relative to directory of other view).  "!" forces overwrite.
.TP
.BI ":[range]rlink[!] name1 name2..."
creates relative symbolic links of files in directory of other view giving each
next link a corresponding name from the argument list.  "!" forces overwrite.
.TP
.BI :screen
toggles whether or not to use the screen program.
.br
The default configuration has the screen option turned off.  The screen program
uses pseudo terminals to allow multiple windows to be used in the console or in
a single xterm.  Starting vifm from screen with the screen option turned on will
cause vifm to open a new screen window for each new file edited or program
launched from vifm.
.br
This requires screen version 3.9.9 or newer for the screen -X argument.
.TP
.BI :screen?
shows whether screen program is used.
.TP
.BI :se[t]
shows all options that differ from their default value.
.TP
.BI ":se[t] all"
shows all options.
.TP
.BI ":se[t] opt1=val1 opt2='val2' opt3=""val3"" ..."
will set options to given values.
.br
You can use following syntax:
 - for all options - option, option? and option&
 - for boolean options - nooption, invoption and option!
 - for integer options - option=x, option+=x and option-=x
 - for string options - option=x
 - for string list options - option=x, option+=x and option-=x
 - for enumeration options - option=x, option+=x and option-=x
 - for enumeration options - option=x
 - for set options - option=x, option+=x and option-=x
the meaning:
 - option - turn option on (for boolean) or print its value (for all others)
 - nooption - turn option off
 - invoption - invert option state
 - option! - invert option state
 - option? - print option value
 - option& - reset option to its default value
 - option=x or option:x - set option to x
 - option+=x - add x to option
 - option-=x - remove (or subtract) x from option
.BI :sh[ell]
will start a shell.
.TP
.BI :sor[t]
creates a popup menu of different sorting methods.
.TP
.BI ":so[urce] file"
reads command-line commands from the file.
.TP
.BI :sp[lit]
splits the window to show both file directories.
.TP
.BI :sp[lit]!
toggles windows splitting.
.TP
.BI ":sp[lit] path"
splits the window to show both file directories.  And changes other pane to
path.
.TP
.BI :[range]s[ubstitite]/pattern/string/[flags]
for each file in range replace a match of pattern with string.
.LP
String can contain \0...\9 to link to capture groups (0 - all match, 1 - first
group, etc.).

Available flags:
.IP - 2
i - ignore case (the 'ignorecase' and 'smartcase' options are not used)
.IP - 2
I - don't ignore case (the 'ignorecase' and 'smartcase' options are not used)
.IP - 2
g - substitute all matches in each file name (each g toggles this)
.TP
.BI :[range]s[ubstitute]//string/[flags]
will use previous pattern.
.TP
.BI :[range]s[ubstitute]
will repeat previous substitution command.
.TP
.BI ":sync [relative path]"
change the other panel to the current panel directory or to some path relative
to the current directory.  Using macros is allowed.
.TP
.BI ":touch file..."
will create files.  Aborts on errors and won't update time of existing files.
.TP
.BI :[range]tr/pattern/string/
for each file in range transliterate the characters which appear in pattern to
the corresponding character in string.  When string is shorter than pattern,
it's padded with its last character.
.LP
String can contain \0...\9 to link to capture groups (0 - all match, 1 - first
group, etc.).
.TP
.BI :undol[ist]
show list of latest changes.  Add ! to see commands.
.TP
.BI ":unl[et][!] $ENV_VAR1 $ENV_VAR2 ..."
remove environment variables. Add ! to omit displaying of warnings about
nonexistent variables.
.TP
.BI :ve[rsion]
show menu with version information.
.TP
.BI :vifm
same as :version.
.TP
.BI :vie[w]
toggle on and off the quick file view.
.TP
.BI :vie[w]!
turns on quick file view if it's off.
.TP
.BI :volumes
only for MS-Windows
.br
will popup menu with volume list.  Hitting l (or Enter) key will open
appropriate volume in the current pane.
.TP
.BI :w[rite]
write vifminfo file (add ! to force write even if settings weren't changed).
.TP
.BI :wq[!]
same as :quit, but ! only disables check of backgrounded commands.
.TP
.BI ":x[it][!]"
will exit Vifm (add ! if you don't want to save changes).

.TP
.BI ":map lhs rhs"
map lhs key sequence to rhs in normal and visual modes.
.TP
.BI ":map! lhs rhs"
map lhs key sequence to rhs in command line mode.

.TP
.BI ":cm[ap] lhs rhs"
map lhs to rhs in command line mode.
.TP
.BI ":nm[ap] lhs rhs"
map lhs to rhs in normal mode.
.TP
.BI ":vm[ap] lhs rhs"
map lhs to rhs in visual mode.

.TP
.BI :cm[ap]
lists all maps in command line mode.
.TP
.BI :nm[ap]
lists all maps in normal mode.
.TP
.BI :vm[ap]
lists all maps in visual mode.

.TP
.BI ":cm[ap] beginning"
lists all maps in command line mode that start with the beginning.
.TP
.BI ":nm[ap] beginning"
lists all maps in normal mode that start with the beginning.
.TP
.BI ":vm[ap] beginning"
lists all maps in visual mode that start with the beginning.

.TP
.BI ":no[remap] lhs rhs"
map the key sequence lhs to {rhs} for normal and visual modes, but disallow
mapping of rhs.
.TP
.BI ":no[remap]! lhs rhs"
map the key sequence lhs to {rhs} for command line mode, but disallow mapping of
rhs.

.TP
.BI ":cno[remap] lhs rhs"
map the key sequence lhs to {rhs} for command line mode, but disallow mapping of
rhs.
.TP
.BI ":nn[oremap] lhs rhs"
map the key sequence lhs to {rhs} for normal mode, but disallow mapping of rhs.
.TP
.BI ":vn[oremap] lhs rhs"
map the key sequence lhs to {rhs} for visual mode, but disallow mapping of rhs.

.TP
.BI ":unm[ap] lhs"
remove the mapping of lhs from normal and visual modes.
.TP
.BI ":unm[ap]! lhs"
remove the mapping of lhs from command line mode.

.TP
.BI ":cu[nmap] lhs"
remove the mapping of lhs from command line mode.
.TP
.BI ":nun[map] lhs"
remove the mapping of lhs from normal mode.
.TP
.BI ":vu[nmap] lhs"
remove the mapping of lhs from visual mode.
.\" ---------------------------------------------------------------------------
.SH Ranges
.\" ---------------------------------------------------------------------------
The ranges implemented include:
  Numbers :2,3
  % - the entire directory.
  . - the current position in the filelist.
  $ - the end of the filelist.
  't - the mark position t.

  :%delete would delete all files in the directory.
  :2,4delete would delete the files in the list positions 2 through 4.
  :.,$delete would delete the files from the current position to the end
    of the filelist.
  :3delete4 would delete the files in the list positions 3, 4, 5, 6.

If a backward range is given :4,2delete - an query message is given and
user can chose what to do next.

The builtin commands that accept a range are :d[elete] and :y[ank].
.\" ---------------------------------------------------------------------------
.SH Command macros
.\" ---------------------------------------------------------------------------
The command macros may be used in user commands.
.TP
.BI %a
User arguments.
.TP
.BI "%c %""c"
The current file under the cursor.
.TP
.BI "%C %""C"
The current file under the cursor in the other directory.
.TP
.BI "%f %""f"
All of the selected files.
.TP
.BI "%F %""F"
All of the selected files in the other directory list.
.TP
.BI "%b %""b"
Same as %f %F.
.TP
.BI "%d %""d"
Full path to current directory.
.TP
.BI "%D %""d"
Full path to other file list directory.
.TP
.BI %m
Show command output in a menu.
.TP
.BI %M
Same as %m, but l (or Enter) key is handled like for :locate and :find commands.
.TP
.BI %S
Show command output in the status bar.
.TP
.BI %s
Execute command in screen split.
.LP
Use %% if you need to put a percent sign in your command.

You can use filename modifiers after %c, %C, %f, %F, %b, %d and %D macros.
Supported modifiers are:
.IP - 2
:p           - full path
.IP - 2
:u           - UNC name of path (e.g. "\\\\server" in "\\\\server\\share"), Windows only.  Expands to current computer name for not UNC paths.
.IP - 2
:~           - relative to the home directory
.IP - 2
:.           - relative to current directory
.IP - 2
:h           - head of the filename
.IP - 2
:t           - tail of the filename
.IP - 2
:r           - root of the filename (without last extension)
.IP - 2
:e           - extension of the filename (last one)
.IP - 2
:s?pat?sub?  - substitute the first occurrence of pat with sub.  You can use any character for '?', but it must not occur in pat or sub.
.IP - 2
:gs?pat?sub? - like :s, but substitutes all occurrences of pat with sub.

See ':h filename-modifiers' in Vim's documentation for the detailed
description.

Using %x means expand corresponding macro escaping all characters that have
special meaning.  And %"x means using of double quotes and escape only backslash
and double quote characters, which is more useful on Windows systems.

Position and quantity (if there is any) of %m, %M, %S or %s macros in the
command is unimportant.  All their occurrences will be removed from the
resulting command.

%c and %f macros are expanded to file names only, when %C and %F are expanded
to full paths.  %f and %F follow this in %b too.
.TP
.BI ":com move mv %f %D"
would set the :move command to move all of the files
selected in the current directory to the other directory.
.TP
The %a macro will substitute any arguments given in a command into the command.  All arguments are considered optional.  ":com lsl !!ls -l %a" will set the lsl command to execute ls -l with or without an argument.
.TP
.BI ":lsl<Return>"
will list the directory contents of the current directory.
.TP
.BI ":lsl filename<Return>"
will list only the given filename.
.TP
The macros can also be used in directly executing commands. ":!mv %f %D" would move the current directory selected files to the other directory.
.TP
Appending & to the end of a command will cause it to be executed in the background.
.BI ":!mv %f %D &"
.\" ---------------------------------------------------------------------------
.SH Command backgrounding
.\" ---------------------------------------------------------------------------
Copy and move operation can take a lot of time to proceed.  That's why vifm
supports backgrounding of this two operations.  To run :copy, :move or :delete
command in the background just add " &" at the end of a command.

For each background operation a new thread will be created.  Currently job
cannot be stopped or paused.

You can see if command is still running in the :jobs menu.  Backgrounded
commands have progress instead of process id at the line beginning.

Background operations cannot be undone.
.\" ---------------------------------------------------------------------------
.SH :set options
.\" ---------------------------------------------------------------------------
.TP
.BI autochpos
type: boolean
.br
default: true
.br
When disabled vifm will set cursor to the first line in the view after :cd and
:pushd commands instead of saved cursor position.  Disabling this will also
make vifm clear information about cursor position in the view history on :cd
and :pushd commands (and on startup if autochpos is disabled in the vifmrc).
l key in the :history . menu is treated like :cd command.  This option affects
bookmarks, file position will not preserved.
.TP
.BI "columns co"
type: int
.br
default: terminal width on startup
.br
Terminal width in characters.
.TP
.BI "confirm cf"
type: boolean
.br
default: true
.br
Ask about permanent deletion of files (on D or :delete! command or on undo/redo
operation).
.TP
.BI "cpoptions cpo"
type: string
.br
default: "s"
.br
Contains a sequence of single-character flags.  Each flag enables behaviour of
older versions of vifm.  Flags:
s - when included, yy and dd act on the selection, otherwise they operate on
    current file only.
.TP
.BI fastrun
type: boolean
.br
default: false
.br
With this option turned on you can run partially entered commands with
unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).
.TP
.BI followlinks
type: boolean
.br
default: true
.br
Follow links on l or Enter.
.TP
.BI fusehome
type: string
.br
default: "/tmp/vifm_FUSE/"
.br
Directory to be used as a root dir for FUSE mounts.
If you change this option, vifm won't remount anything.  It affects future
mounts only.
.TP
.BI "gdefault gd"
type: boolean
.br
default: false
.br
When on, 'g' flag is on for :substitute by default.
.TP
.BI "history hi"
type: integer
.br
default: 15
.br
Maximum number of directories in the view history and lines in the prompt,
command line and search histories.
.TP
.BI "hlsearch hls"
type: bool
.br
default: true
.br
Highlight all matches of search pattern.
.TP
.BI iec
type: boolean
.br
default: false
.br
Use KiB, MiB, ... instead of KB, MB, ...
.TP
.BI "ignorecase ic"
type: boolean
.br
default: false
.br
Ignore case in search patterns (:substiute, / and ? commands) and characters
after f and F commands.  It doesn't affect file filtering.
.TP
.BI "incsearch is"
type: boolean
.br
default: false
.br
When this option is set, search will be performed starting from initial cursor
position each time search pattern is changed.
.TP
.BI "laststatus ls"
type: boolean
.br
default: true
.br
Controls if status bar is visible.
.TP
.BI lines
type: int
.br
default: terminal height on startup
.br
Terminal height in lines.
.TP
.BI "rulerformat ruf"
type: string
.br
default: "%=%l-%S "
.br
Determines the content of the ruler.  Its width is 13 characters and it's right
aligned.  Following macros are supported:
.br
%l - file number
.br
%L - total number of files in view (including filtered)
.br
%- - number of filtered files
.br
%S - number of showed files
.br
%= - separation point between left and right align items
.br
%% - percent sign
.br
Percent sign can be followed by optional minimum field width.  Add '-' before
minimum field width if you want field to be right aligned.
.TP
.BI runexec
type: boolean
.br
default: false
.br
Run executable file on Enter or l.
.TP
.BI "scrollbind scb"
type: boolean
.br
default: false
.br
When this option is set, vifm will try to keep difference of scrolling positions
of two windows constant.
.TP
.BI "scrolloff so"
type: int
.br
default: 0
.br
Minimal number of screen lines to keep above and below the cursor.  If you
want cursor line to always be in the middle of the view (except at the
beginning or end of the file list), set this option to some large value
(e.g. 999).
.TP
.BI "shell sh"
type: string
.br
default: $SHELL or "sh" or "cmd" (on MS-Windows)
.br
Full path to the shell to use to run external commands.
.TP
.BI slowfs
type: string list
.br
default: ""
.br
only for *nix
.br
A list of mounter fs name beginnings (first column in /etc/mtab or /proc/mounts)
that work too slow for you.  This option can be used to stop vifm from making
some requests to particular kinds of file systems that can slow down file
browsing.  Currently this means don't check if directory has changed and do not
check if target of symbolic links exists.
.TP
.BI "smartcase scs"
type: boolean
.br
default: false
.br
Overrides the ignorecase option if the search pattern contains at least one
upper case character.  Only used when ignorecase option is enabled.  It doesn't
affect file filtering.
.TP
.BI sort
type: string list
.br
default: +name
.br
Sets list of sorting keys (first item is primary key, second is secondary key,
etc.):
   [+-]ext   - sort by extension
   [+-]name  - sort by name (including extension)
   [+-]iname - sort by name (including extension, ignores case)
   [+-]gid   - sort by group id (*nix only)
   [+-]gname - sort by group name (*nix only)
   [+-]mode  - sort by mode (*nix only)
   [+-]uid   - sort by owner id (*nix only)
   [+-]uname - sort by owner name (*nix only)
   [+-]size  - sort by size
   [+-]atime - sort by time accessed
   [+-]ctime - sort by time changed
   [+-]mtime - sort by time modified
.LP
\'+' means ascending sort for this key, and '-' means descending sort.

In case name (iname on Windoes) is skipped, it will be added at the end
automatically.
.TP
.BI sortnumbers
type: boolean
.br
default: false
.br
Natural sort of (version) numbers within text.
.TP
.BI "statusline stl"
type: string
.br
default: ""
.br
Determines the content of the status line (the line right above command-line).
Empty string means use same format like in previous versions.  Following macros
are supported:
.br
%t - file name
.br
%A - file attributes (permissions on *nix or properties on Windows)
.br
%u - user name or uid (if it cannot be resolved)
.br
%g - group name or gid (if it cannot be resolved)
.br
%s - file size in human readable format
.br
%d - file modification date (uses 'timefmt' option)
.br
all 'rulerformat' macros
.br
Percent sign can be followed by optional minimum field width.  Add '-' before
minimum field width if you want field to be right aligned.
Example:

.EX
 set statusline="  %t%= %A %10u:%-7g %15s %20d "
.EE

On Windows file properties include next flags (upper case means flag is on):
.br
A - archive
.br
H - hidden
.br
I - content isn't indexed
.br
R - readonly
.br
S - system
.br
C - compressed
.br
D - directory
.br
E - encrypted
.br
P - reparse point (e.g. symbolic link)
.br
Z - sparse file
.TP
.BI sortorder
type: enumeration
.br
default: ascending
.br
Sets sort order for primary key: ascending, descending.
.TP
.BI "tabstop ts"
type: integer
.br
default: value from curses library
.br
Number of spaces that a Tab in the file counts for.
.TP
.BI timefmt
type: string
.br
default: " %m/%d %H:%M"
.br
Format of time in file list.  See man date or man strftime for details.
.TP
.BI "timeoutlen tm"
type: integer
.br
default: 1000
.br
The time in milliseconds that is waited for a mapped key in case of already
typed key sequence is ambiguous.
.TP
.BI trash
type: boolean
.br
default: true
.br
Use trash directory.
.TP
.BI trashdir
type: string
.br
default: "$HOME/.vifm/Trash"
.br
Sets the trash directory. Will attempt to create the directory if it does not exist.
.TP
.BI "undolevels ul"
type: integer
.br
default: 100
.br
Maximum number of changes that can be undone.
.TP
.BI vicmd
type: string
.br
default: "vim"
.br
The actual command used to start vi.  Ampersand sign at the end (regardless
whether it's preceded by space or not) means backgrounding of command.
.TP
.BI vixcmd
type: string
.br
default: value of vicmd
.br
The command used to start vi when in X.  Ampersand sign at the end (regardless
whether it's preceded by space or not) means backgrounding of command.
.TP
.BI vifminfo
type: set
.br
default: bookmarks
.LP
Controls what will be saved in the $VIFM/vifminfo file.
   options   - all options that can be set with the :set command
   filetypes - associated programs and viewers
   commands  - user defined commands (see :command description)
   bookmarks - bookmarks, except special ones like '< and '>
   tui       - state of the user interface (sorting, number of windows, quick
               view state, active view)
   dhistory  - directory history
   state     - filters and screen program using state
   cs        - default color scheme
   savedirs  - save last visited directory (needs dhistory)
   chistory  - command line history
   shistory  - search history (/ and ? commands)
   dirstack  - directory stack
   registers - registers content
   phistory  - prompt history
.TP
.BI vimhelp
type: boolean
.br
default: false
.br
Use vim help format.
.TP
.BI "wildmenu wmnu"
type: boolean
.br
default: false
.br
Controls whether possible matches of completion will be shown above the command
line.
.TP
.BI wrap
type: boolean
.br
default: true
.br
Controls whether to wrap text in quick view.
.TP
.BI "wrapscan ws"
type: boolean
.br
default: true
.br
Searches wrap around end of the list.
.\" ---------------------------------------------------------------------------
.SH Mappings
.\" ---------------------------------------------------------------------------
Since it's not easy to enter special characters there are several special
sequences that can be used in place of them.  They are:
.TP
.BI <cr>
Enter key
.TP
.BI <bs>
Backspace key
.TP
.BI "<tab> <s-tab>"
Tabulation and Shift+Tabulation keys
.TP
.BI "<esc> <space> <home> <end> <left> <right> <up> <down> <pageup> <pagedown>"
Keys with obvious names.
.TP
.BI "<del> <delete>"
Delete key.  <del> and <delete> mean different codes, but <delete> is more
common.
.TP
.BI "<c-a>,<c-b>,...,<c-z>,<c-[>,<c-\>,<c-]>,<c-^>,<c-_>"
Control + some key.
.TP
.BI "<a-a>,<a-b>,...,<a-z>"
.BI "<m-a>,<m-b>,...,<m-z>"
Alt + some key.
.TP
.BI "<a-c-a>,<a-c-b>,...,<a-c-z>"
.BI "<m-c-a>,<m-c-b>,...,<m-c-z>"
only for *nix
.br
Alt + Ctrl + some key.
.TP
.BI "<f0> - <f63>"
Functional keys
.TP
.BI "<c-f1> - <c-f12>"
only for MS-Windows
.br
Functional keys with Control key pressed.
.TP
.BI "<a-f1> - <a-f12>"
only for MS-Windows
.br
Functional keys with Alt key pressed.
.TP
.BI "<s-f1> - <s-f12>"
only for MS-Windows
.br
Functional keys with Shift key pressed.
.LP
vifm removes whitespace characters at the beginning and end of commands.
That's why you may want to use <space> at the end of rhs in mappings.  For
example:

.EX
 cmap <f1> man<space>
.EE

will put "man " in line when you hit the <f1> key in the command line mode.
.\" ---------------------------------------------------------------------------
.SH Compatibility mode
.\" ---------------------------------------------------------------------------
Compatibility mode:
    - <tab> to switch between panes.

Vim like mode:
    - <c-i> (<tab>) to go forward on history.
.\" ---------------------------------------------------------------------------
.SH Menus and dialogs
.\" ---------------------------------------------------------------------------
General

j, k - move.
<Escape>, Ctrl-C, ZZ, ZQ - quit.
<Return>, l - select and exit the menu.
Ctrl-L - redraw the menu.

In all menus

Ctrl-B/Ctrl-F
Ctrl-D/Ctrl-U
Ctrl-E/Ctrl-Y
/ and ?, n/N
[num]G/[num]gg
H/M/L
zb/zt/zz
zh - scroll menu items [count] characters to the right.
zl - scroll menu items [count] characters to the left.
zH - scroll menu items half of screen width characters to the right.
zL - scroll menu items half of screen width characters to the left.

All these keys have the same meaning as in normal mode (but not L in filetype
menu).

: - enter command line mode for menus (currently only :exi[t], :q[uit], :x[it]
and :range are supported).

Apropos menu

l key wont close the menu allowing user to pick another man page, use :q to
close the menu.

Commands menu

dd on a command to remove.

Bookmarks menu

Escape or Ctrl-C to abort j and k to move through.
dd on a bookmark to remove.

Directory stack menu

Pressing l or Enter on directory name will rotate stack to place selected
directory pair at the top of the stack.

Filetype menu

Commands from vifmrc are displayed above empty line. When all commands below
empty line were found in .desktop files.

J and K - to move menu items
L - save all commands above empty line as program list

Fileinfo dialog

Enter - close dialog
q - close dialog

Sort dialog

h - switch ascending/descending.
Space - switch ascending/descending.
q - close dialog

Attributes (permissions or properties) dialog

h - check/uncheck.
Space - check/uncheck.
q - close dialog

Item states:
.IP - 2
* - checked flag.
.IP - 2
X - means that it has different value for files in selection.
.IP - 2
d (*nix only) - (only for execute flags) means u-x+X, g-x+X or o-x+X argument \
for the chmod program.  If you want to remove execute right from all files, \
but preserve it for directories, set all execute flags to 'd' and check \
\'Set Recursively' flag.
.\" ---------------------------------------------------------------------------
.SH Startup
.\" ---------------------------------------------------------------------------
On startup vifm determines several variables that are used during the session.
They are determined in the order they appear below.

On *nix systems $HOME is normally present and used as is.
On Windows systems vifm tries to find correct home directory in the following
order:
 - $HOME variable;
 - $USERPROFILE variable;
 - a combination of $HOMEDRIVE and $HOMEPATH variables.

vifm tries to find correct configuration directory by checking the following
places:
 - $VIFM variable;
 - parent directory of the executable file (on Windows only);
 - $HOME/.vifm directory;
 - $APPDATA/Vifm directory (on Windows only).

vifm tries to find correct configuration file by checking the following places:
 - $MYVIFMRC variable;
 - vifmrc in parent directory of the executable file (on Windows only);
 - $VIFM/vifmrc file.
.\" ---------------------------------------------------------------------------
.SH Configure
.\" ---------------------------------------------------------------------------
See Startup section above for the explanations on $VIFM and $MYVIFMRC.

The vifmrc file contains commands that will be executed on vifm startup.  See
$MYVIFMRC variable description for search algorithm used to find vifmrc.
Use it to set settings, mappings, filetypes etc.  To use multi line commands
precede each next line with a slash (whitespace before slash is ignored, but all
spaces at the end of the lines are saved).  For example:
set
    \\smartcase
equals "setsmartcase".  When
set<space here>
    \ smartcase
equals "set  smartcase".

The $VIFM/vifminfo file contains session settings.  You may edit it by hand
to change the settings, but it's not recommended to do that, edit vifmrc
instead.  You can control what settings will be saved in vifminfo by setting
\'vifminfo' option.  Vifm always writes this file on exit unless 'vifminfo'
option is empty.  Bookmarks, commands, directory history, filetypes, fileviewers
and registers in the file are merged with vifm configuration (which has bigger
priority).

The $VIFM/scripts directory can contain shell scripts.  vifm modifies
it's PATH environment variable to let user run those scripts without specifying
full path.  All subdirectories of the $VIFM/scripts will be added to PATH too.
Script in a subdirectory overlaps script with the same name in all its parent
directories.

The $VIFM/colors directory contains color schemes.
.\" ---------------------------------------------------------------------------
.SH Plugin
.\" ---------------------------------------------------------------------------
Plugin for using vifm in vim as a file selector.

Commands:

  :EditVifm   select a file or files to open in the current buffer.
  :SplitVifm  split buffer and select a file or files to open.
  :VsplitVifm vertically split buffer and select a file or files to open.
  :DiffVifm   select a file or files to compare to the current file with
              :vert diffsplit.
  :TabVifm    select a file or files to open in tabs.

Each command accepts up to two arguments: left pane directory and right pane
directory.

The plugin have only two settings.  It's a string variable named g:vifm_term to
let user specify command to run gui terminal.  By default it's equal to
\'xterm -e'.  And anoter string variable named g:vifm_exec, which equals "vifm"
by default and specifies path to vifm's executable.  To pass arguments to
vifm use g:vifm_exec_args, which is empty by default.

To use the plugin copy the vifm.vim file to either the system wide vim/plugin
directory or into ~/.vim/plugin.

If you would prefer not to use the plugin and it is in the system wide plugin
directory add

let loaded_vifm=1

to your ~/.vimrc file.
.\" ---------------------------------------------------------------------------
.SH Reserved
.\" ---------------------------------------------------------------------------

The following command names are reserved and shouldn't be used for user
commands.

  g[lobal]
  v[global]
.\" ---------------------------------------------------------------------------
.SH SEE ALSO
.\" ---------------------------------------------------------------------------
Website: http://vifm.sourceforge.net/
.\" ---------------------------------------------------------------------------
.SH AUTHOR
.\" ---------------------------------------------------------------------------
Vifm was written by ksteen <ksteen@users.sourceforge.net>
.br
And currently being developed by xaizek <xaizek@gmail.com>
