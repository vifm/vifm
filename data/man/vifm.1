.TH VIFM 1 "May 04, 2017" "vifm 0.8.2"
.\" ---------------------------------------------------------------------------
.SH NAME
.\" ---------------------------------------------------------------------------
vifm \- vi file manager
.\" ---------------------------------------------------------------------------
.SH SYNOPSIS
.\" ---------------------------------------------------------------------------
vifm [OPTION]...
.br
vifm [OPTION]... path
.br
vifm [OPTION]... path path
.\" ---------------------------------------------------------------------------
.SH DESCRIPTION
.\" ---------------------------------------------------------------------------
Vifm is an ncurses based file manager with vi like keybindings.  If you use vi,
vifm gives you complete keyboard control over your files without having to learn
a new set of commands.
.\" ---------------------------------------------------------------------------
.SH OPTIONS
.\" ---------------------------------------------------------------------------
vifm starts in the current directory unless it is given a different directory
on the command line or 'vifminfo' option includes "savedirs" (in which case
last visited directories are used as defaults).
.TP
.BI -
Read list of files from standard input stream and compose custom view out of
them (see "Custom views" section).  Current working directory is used as a base
for relative paths.
.TP
.BI <path>
Starts Vifm in the specified path.
.TP
.BI "<path> <path>"
Starts Vifm in the specified paths.
.LP
Specifying two directories triggers split view even when vifm was in single-view
mode on finishing previous session.  To suppress this behaviour :only command
can be put in the vifmrc file.
.LP
When only one path argument is found on command-line, the left/top pane is
automatically set as the current view.
.LP
Paths to files are also allowed in case you want vifm to start with some
archive opened.
.TP
.BI "\-\-select <path>"
Open parent directory of the given path and select specified file in it.
.TP
.BI \-f
Makes vifm instead of opening files write selection to $VIFM/vimfiles and quit.
.TP
.BI "\-\-choose-files <path>|\-"
Sets output file to write selection into on exit instead of opening files.
"\-" means standard output.  Use empty value to disable it.
.TP
.BI "\-\-choose-dir <path>|\-"
Sets output file to write last visited directory into on exit.  "\-" means
standard output.  Use empty value to disable it.
.TP
.BI "\-\-delimiter <delimiter>"
Sets separator for list of file paths written out by vifm.  Empty value means
null character.  Default is new line character.
.TP
.BI "\-\-on\-choose <command>"
Sets command to be executed on selected files instead of opening them.  The
command may use any of macros described in "Command macros" section below.  The
command is executed once for whole selection.
.TP
.BI "\-\-logging[=<startup log path>]"
Log some operational details $VIFM/log.  If the optional startup log path
is specified and permissions allow to open it for writing, then logging of
early initialization (before value of $VIFM is determined) is put there.
.TP
.BI \-\-server\-list
List available server names and exit.
.TP
.BI "\-\-server\-name <name>"
Name of target or this instance (sequential numbers are appended on name
conflict).
.TP
.BI "\-\-remote"
Sends the rest of the command line to another instance of vifm, \-\-server\-name
is treated just like any other argument and should precede \-\-remote on the
command line.  When there is no server, quits silently.  There is no limit on
how many arguments can be processed.  One can combine \-\-remote with \-c
<command> or +<command> to execute commands in already running instance of vifm.
See also "Client\-Server" section below.
.TP
.BI "\-c <command> or +<command>"
Run command-line mode <command> on startup.  Commands in such arguments are
executed in the order they appear in command line.  Commands with spaces or
special symbols must be enclosed in double or single quotes or all special
symbols should be escaped (the exact syntax strongly depends on shell).  "+"
argument is equivalent to "$" and thus picks last item of of the view.
.TP
.BI "\-\-help, \-h"
Show a brief command summary and exit vifm.
.TP
.BI "\-\-version, \-v"
Show version information and quit.
.TP
.BI \-\-no\-configs
Skip reading vifmrc and vifminfo.

.LP
See "Startup" section below for the explanations on $VIFM.
.br
.\" ---------------------------------------------------------------------------
.SH General keys
.\" ---------------------------------------------------------------------------
.TP
.BI "Ctrl-C or Escape"
cancel most operations (see "Cancellation" section below), clear all selected
files.
.TP
.BI Ctrl-L
clear and redraw the screen.
.\" ---------------------------------------------------------------------------
.SH Basic Movement
.\" ---------------------------------------------------------------------------
The basic vi key bindings are used to move through the files and pop-up windows.
.TP
.BI "k, gk, or Ctrl-P"
move cursor up one line.
.TP
.BI "j, gj or Ctrl-N"
move cursor down one line.
.TP
.BI h
when 'lsview' is off move up one directory (moves to parent directory node in
tree view), otherwise move left one file.
.TP
.BI l
when 'lsview' is off move into a directory or launches a file, otherwise move
right one file.
.TP
.BI gg
move to the first line of the file list.
.TP
.BI G
move to the last line in the file list.
.TP
.BI gh
go up one directory.
.TP
.BI "gl or Enter"
enter directory or launch a file.
.TP
.BI H
move to the first file in the window.
.TP
.BI M
move to the file in the middle of the window.
.TP
.BI L
move to the last file in the window.
.TP
.BI "Ctrl-F or Page Down"
move forward one page.
.TP
.BI "Ctrl-B or Page Up"
move back one page.
.TP
.BI Ctrl-D
jump back one half page.
.TP
.BI Ctrl-U
jump forward one half page.
.TP
.BI n%
move to the file that is n percent from the top of the list (for example 25%).
.TP
.BI "0 or ^"
move cursor to the first column.  See 'lsview' option description.
.TP
.BI $
move cursor to the last column.  See 'lsview' option description.
.TP
.BI Space
switch file lists.
.\" ---------------------------------------------------------------------------
.SH Movement with Count
.\" ---------------------------------------------------------------------------
.TP
Most movement commands also accept a count, 12j would move down 12 files.
.TP
.BI [count]%
move to percent of the file list.
.TP
.BI [count]j
move down [count] files.
.TP
.BI [count]k
move up [count] files.
.TP
.BI "[count]G or [count]gg"
move to list position [count].
.TP
.BI [count]h
go up [count] directories.
.\" ---------------------------------------------------------------------------
.SH Scrolling panes
.\" ---------------------------------------------------------------------------
.TP
.BI zt
redraw pane with file in top of list.
.TP
.BI zz
redraw pane with file in center of list.
.TP
.BI zb
redraw pane with file in bottom of list.
.TP
.BI Ctrl-E
scroll pane one line down.
.TP
.BI Ctrl-Y
scroll pane one line up.
.\" ---------------------------------------------------------------------------
.SH Pane manipulation
.\" ---------------------------------------------------------------------------
Second character can be entered with or without Control key.
.TP
.BI "Ctrl-W H"
move the pane to the far left.
.TP
.BI "Ctrl-W J"
move the pane to the very bottom.
.TP
.BI "Ctrl-W K"
move the pane to the very top.
.TP
.BI "Ctrl-W L"
move the pane to the far right.

.TP
.BI "Ctrl-W h"
switch to the left pane.
.TP
.BI "Ctrl-W j"
switch to the pane below.
.TP
.BI "Ctrl-W k"
switch to the pane above.
.TP
.BI "Ctrl-W l"
switch to the right pane.

.TP
.BI "Ctrl-W b"
switch to bottom-right window.
.TP
.BI "Ctrl-W t"
switch to top-left window.

.TP
.BI "Ctrl-W p"
switch to previous window.
.TP
.BI "Ctrl-W w"
switch to other pane.

.TP
.BI "Ctrl-W o"
leave only one pane.
.TP
.BI "Ctrl-W s"
split window horizontally.
.TP
.BI "Ctrl-W v"
split window vertically.

.TP
.BI "Ctrl-W x"
exchange panes.
.TP
.BI "Ctrl-W z"
quit preview pane or view modes.

.TP
.BI "Ctrl-W \-"
decrease size of the view by count.
.TP
.BI "Ctrl-W +"
increase size of the view by count.
.TP
.BI "Ctrl-W <"
decrease size of the view by count.
.TP
.BI "Ctrl-W >"
increase size of the view by count.

.TP
.BI "Ctrl-W |"
set current view size to count.
.TP
.BI "Ctrl-W _"
set current view size to count.
.TP
.BI "Ctrl-W ="
make size of two views equal.
.LP
For Ctrl-W +, Ctrl-W \-, Ctrl-W <, Ctrl-W >, Ctrl-W | and Ctrl-W _ commands
count can be given before and/or after Ctrl-W.  The resulting count
is a multiplication of those two.  So "2 Ctrl-W 2 \-" decreases
window size by 4 lines or columns.

Ctrl-W | and Ctrl-W _ maximise current view by default.
.\" ---------------------------------------------------------------------------
.SH Marks
.\" ---------------------------------------------------------------------------
.TP
Marks are set the same way as they are in vi.
.LP
You can use these characters for marks [a\-z][A\-Z][0\-9].
.TP
.BI m[a\-z][A\-Z][0\-9]
set a mark for the file at the current cursor position.
.TP
.BI '[a\-z][A\-Z][0\-9]
navigate to the file set for the mark.

.LP
There are also several special marks that can't be set manually:
.RS 2
.IP \- 2
\(aq (single quote) \- previously visited directory of the view, thus hitting
\(aq\(aq allows switching between two last locations
.IP \- 2
< \- the first file of the last visually selected block
.IP \- 2
> \- the last file of the last visually selected block
.RE
.\" ---------------------------------------------------------------------------
.SH Searching
.\" ---------------------------------------------------------------------------
.TP
.BI "/regular expression pattern"
search for files matching regular expression in forward direction and advance
cursor to next match.
.TP
.BI "/"
perform forward search with top item of search pattern history.
.TP
.BI "?regular expression pattern"
search for files matching regular expression in backward direction and advance
cursor to previous match.
.TP
.BI "?"
perform backward search with top item of search pattern history.
.TP
Trailing slash for directories is taken into account, so /\\/ searches for \
directories and symbolic links to directories.  At the moment // works too, \
but this can change in the future, so consider escaping the slash if not \
typing pattern by hand.
.TP
Matches are automatically selected if 'hlsearch' is set.  Enabling 'incsearch' \
makes search interactive.  'ignorecase' and 'smartcase' options affect case \
sensitivity of search queries.

.TP
.BI [count]n
go to the next file matching last search pattern.  Takes last search direction
into account.
.TP
.BI [count]N
go to the previous file matching last search pattern.  Takes last search
direction into account.
.TP
If 'hlsearch' option is set, hitting n/N to perform search and go to the first \
matching item resets current selection in normal mode.  It is not the case if \
search was already performed on files in the directory, thus selection is not \
reset after clearing selection with escape key and hitting n/N key again.
.LP
Note: vifm uses extended regular expressions for / and ?.

.TP
.BI [count]f[character]
search forward for file with [character] as first character in name.  Search
wraps around the end of the list.
.TP
.BI [count]F[character]
search backward for file with [character] as first character in name.  Search
wraps around the end of the list.
.TP
.BI [count];
find the next match of f or F.
.TP
.BI [count],
find the previous match of f or F.
.LP
Note: f, F, ; and , wrap around list beginning and end when they are used
alone and they don't wrap when they are used as selectors.
.\" ---------------------------------------------------------------------------
.SH File Filters
.\" ---------------------------------------------------------------------------
There are three basic file filters:
.RS 2
.IP \- 2
dot files filter (excluding "." and ".." special directories, whose appearance
is controlled by the 'dotdirs' option);
.IP \- 2
manual filter for file names;
.IP \- 2
automatic filter for file names;
.IP \- 2
local filter for file names (see description of the "=" normal mode command).
.RE

Performing operations on manual filter for file names automatically does the
same on automatic one.  The file name filter is separated mainly for
convenience purpose and to get more deterministic behaviour.

The basic vim folding key bindings are used for filtering files.
.TP
Each file list has its own copy of each filter.
.TP
Filtered files are not checked in / search or :commands.
.TP
Files and directories are filtered separately.  For this a slash is appended \
to a directory name before testing whether it matches the filter.  Examples:

.EX
.LP
  " filter directories which names end with '.files'
  :filter /^.*\\.files\\/$/

  " filter files which names end with '.d'
  :filter /^.*\\.d$/

  " filter files and directories which names end with '.o'
  :filter /^.*\\.o\\/?$/
.EE
.TP
.BI za
toggle visibility of dot files.
.TP
.BI zo
show dot files.
.TP
.BI zm
hide dot files.
.TP
.BI zf
add selected files to file name filter.
.TP
.BI zO
show files hidden by file name filter.
.TP
.BI zM
restore all filters.
.TP
.BI zR
remove all filters.
.TP
.BI zr
remove local filter.
.TP
.BI zd
exclude selection or current file from a custom view.  Does nothing for regular
view.  For tree view excluding directory excludes that sub-tree.  For compare
views zd hides group of adjacent identical files, count can be specified as 1 to
exclude just single file or selected items instead.  Files excluded this way are
not counted as filtered out and can't be returned unless view is reloaded.
.TP
.BI "=regular expression pattern"
filter out files that don't match regular expression.  Whether view is updated
as regular expression is changed depends on the value of the 'incsearch' option.
This kind of filter is automatically reset when directory is changed.
.\" ---------------------------------------------------------------------------
.SH Other Normal Mode Keys
.\" ---------------------------------------------------------------------------
.TP
.BI [count]:
enter command line mode.  [count] generates range.
.TP
.BI q:
open external editor to prompt for command-line command.  See
"Command line editing" section for details.
.TP
.BI q/
open external editor to prompt for search pattern to be searched in forward
direction.  See "Command line editing" section for details.
.TP
.BI q?
open external editor to prompt for search pattern to be searched in backward
direction.  See "Command line editing" section for details.
.TP
.BI q=
open external editor to prompt for filter pattern.  See "Command line editing"
section for details.  Unlike other q{x} commands this one doesn't work in Visual
mode.
.TP
.BI "[count]!! and [count]!<selector>"
enter command line mode with entered ! command.  [count] modifies range.
.TP
.BI Ctrl-O
go backwards through directory history of current view.  Nonexistent directories
are automatically skipped.
.TP
.BI Ctrl-I
if 'cpoptions' contains "t" flag, <tab> and <c-i> switch active pane just like
<space> does, otherwise it goes forward through directory history of current
view.  Nonexistent directories are automatically skipped.
.TP
.BI Ctrl-G
create a window showing detailed information about the current file.
.TP
.BI "Shift-Tab"
enters view mode (works only after activating view pane with :view command).
.TP
.BI ga
calculate directory size.  Uses cached directory sizes when possible for better
performance.  As a special case calculating size of ".." entry results in
calculation of size of current directory.
.TP
.BI gA
like ga, but force update.  Ignores old values of directory sizes.
.LP
If file under cursor is selected, each selected item is processed, otherwise
only current file is updated.
.TP
.BI gf
find link destination (like l with 'followlinks' off, but also finds
directories).
.TP
.BI gr
only for MS-Windows
.br
same as l key, but tries to run program with administrative privileges.
.TP
.BI av
go to visual mode into selection amending state preserving current selection.
.TP
.BI gv
go to visual mode restoring last selection.
.TP
.BI [reg]gs
when no register is specified, restore last t selection (similar to what
gv does for visual mode selection).  If register is present, then all
files listed in that register and which are visible in current view are
selected.
.TP
.BI gu<selector>
make names of selected files lowercase.
.TP
.BI "[count]guu and [count]gugu"
make names of [count] files starting from the current one lowercase.  Without
[count] only current file is affected.
.TP
.BI gU<selector>
make names of selected files uppercase.
.TP
.BI "[count]gUU and [count]gUgU"
make names of [count] files starting from the current one uppercase.  Without
[count] only current file is affected.
.TP
.BI e
explore file in the current pane.
.TP
.BI i
handle file (even if it's an executable and 'runexec' option is set).
.TP
.BI cw
change word is used to rename a file or files.
.TP
.BI cW
change WORD is used to change only name of file (without extension).
.TP
.BI cl
change link target.
.TP
.BI co
only for *nix
.br
change file owner.
.TP
.BI cg
only for *nix
.br
change file group.
.TP
.BI [count]cp
change file attributes (permission on *nix and properties on Windows).  If
[count] is specified, it's treated as numerical argument for non-recursive
`chmod` command (of the form [0-7]{3,4}).
.TP
.BI [count]C
clone file [count] times.
.TP
.BI "[count]dd or d[count]selector"
move selected file or files to trash directory (if 'trash' option is set,
otherwise delete).  See "Trash directory" section below.
.TP
.BI "[count]DD or D[count]selector"
like dd and d<selector>, but omitting trash directory (even when 'trash' option
is set).
.TP
.BI "Y, [count]yy or y[count]selector"
yank selected files.
.TP
.BI p
copy yanked files to the current directory or move the files to the current
directory if they were deleted with dd or :d[elete] or if the files were yanked
from trash directory.  See "Trash directory" section below.
.TP
.BI P
move the last yanked files.  The advantage of using P instead of d followed by
p is that P moves files only once.  This isn't important in case you're moving
files in the same file system where your home directory is, but using P to
move files on some other file system (or file systems, in case you want to move
files from fs1 to fs2 and your home is on fs3) can save your time.
.TP
.BI al
put symbolic links with absolute paths.
.TP
.BI rl
put symbolic links with relative paths.
.TP
.BI t
select or unselect (tag) the current file.
.TP
.BI u
undo last change.
.TP
.BI Ctrl-R
redo last change.
.TP
.BI dp
in compare view of "ofboth grouppaths" kind, makes corresponding entry of the
other pane equal to the current one.  The semantics is as follows:
 \- nothing done for identical entries
 \- if file is missing in current view, its pair gets removed
 \- if file is missing or differs in other view, it's replaced
 \- file pairs are defined by matching relative paths
.br
File removal obeys 'trash' option.  When the option is enabled, the operation
can be undone/redone (although results won't be visible automatically).
.br
Unlike in Vim, this operation is performed on a single line rather than
a set of adjacent changes.
.TP
.BI do
same as dp, but applies changes in the opposite direction.
.TP
.BI "v or V"
enter visual mode, clears current selection.
.TP
.BI [count]Ctrl-A
increment first number in file name by [count] (1 by default).
.TP
.BI [count]Ctrl-X
decrement first number in file name by [count] (1 by default).
.TP
.BI ZQ
same as :quit!.
.TP
.BI ZZ
same as :quit.
.TP
.BI .
repeat last command-line command (not normal mode command) of this session (does
nothing right after startup or :restart command).  The command doesn't depend on
command-line history and can be used with completely disabled history.
.TP
.BI (
go to previous group.  Groups are defined by primary sorting key.  For name and
iname members of each group have same first letter, for all other sorting keys
vifm uses size, uid, ...
.TP
.BI )
go to next group.  See ( key description above.
.TP
.BI {
similar to ( key, but always considers whether entry is file or directory and
thus speeds up navigation to closest previous entry of the opposite type.
.TP
.BI }
same as {, but in forward direction.
.TP
.BI [c
go to previous mismatched entry in directory comparison view or do nothing.
.TP
.BI ]c
go to next mismatched entry in directory comparison view or do nothing.
.TP
.BI [d
go to previous directory entry or do nothing.
.TP
.BI ]d
go to next directory entry or do nothing.
.TP
.BI [s
go to previous selected entry or do nothing.
.TP
.BI ]s
go to next selected entry or do nothing.
.TP
.BI [z
go to first sibling of current entry.
.TP
.BI ]z
go to last sibling of current entry.
.TP
.BI zj
go to next directory sibling of current entry or do nothing.
.TP
.BI zk
go to previous directory sibling of current entry or do nothing.
.\" ---------------------------------------------------------------------------
.SH Using Count
.\" ---------------------------------------------------------------------------
.TP
You can use count with commands like yy.
.TP
.BI [count]yy
yank count files starting from current cursor position downward.
.TP
Or you can use count with motions passed to y, d or D.
.TP
.BI d[count]j
delete (count + 1) files starting from current cursor position upward.
.\" ---------------------------------------------------------------------------
.SH Registers
.\" ---------------------------------------------------------------------------
.LP
vifm supports multiple registers for temporary storing list of yanked or
deleted files.

Registers should be specified by hitting double quote key followed by a
register name.  Count is specified after register name.  By default commands use
unnamed register, which has double quote as its name.

Though all commands accept registers, most of commands ignores them (for example
H or Ctrl-U).  Other commands can fill register or append new files to it.

Presently vifm supports ", _, a-z and A-Z characters as register names.

As mentioned above " is unnamed register and has special meaning of the default
register.  Every time when you use named registers (a-z and A-Z) unnamed
register is updated to contain same list of files as the last used register.

_ is black hole register.  It can be used for writing, but its list is always
empty.

Registers with names from a to z and from A to Z are named ones.  Lowercase
registers are cleared before adding new files, while uppercase aren't and should
be used to append new files to the existing file list of appropriate lowercase
register (A for a, B for b, ...).

Registers can be changed on :empty command if they contain files under trash
directory (see "Trash directory" section below).

Registers do not contain one file more than once.

Example:
.EX

  "a2yy

.EE
.br
puts names of two files to register a (and to the unnamed register),
.EX

  "Ad

.EE
.br
removes one file and append its name to register a (and to the unnamed
register),
.EX

  p or "ap or "Ap

.EE
.br
inserts previously yanked and deleted files into current directory.
.\" ---------------------------------------------------------------------------
.SH Selectors
.\" ---------------------------------------------------------------------------
.TP
y, d, D, !, gu and gU commands accept selectors.  You can combine them with \
any of selectors below to quickly remove or yank several files.
.LP
Most of selectors are like vi motions: j, k, gg, G, H, L, M, %, f, F, ;, \
comma, ', ^, 0 and $.  But there are some additional ones.
.TP
.BI a
all files in current view.
.TP
.BI s
selected files.
.TP
.BI S
all files except selected.
.LP
Examples:
.RS 2
.IP \- 2
dj \- delete file under cursor and one below;
.IP \- 2
d2j \- delete file under cursor and two below;
.IP \- 2
y6gg \- yank all files from cursor position to 6th file in the list.
.RE

When you pass a count to whole command and its selector they are multiplied. So:
.RS 2
.IP \- 2
2d2j \- delete file under cursor and four below;
.IP \- 2
2dj \- delete file under cursor and two below;
.IP \- 2
2y6gg \- yank all files from cursor position to 12th file in the list.
.RE
.\" ---------------------------------------------------------------------------
.SH Visual Mode
.\" ---------------------------------------------------------------------------
Visual mode has to generic operating submodes:
.RS 2
.IP \- 2
plain selection as it is in Vim;
.IP \- 2
selection editing submode.
.RE

Both modes select files in range from cursor position at which visual mode was
entered to current cursor position (let's call it "selection region").  Each of
two borders can be adjusted by swapping them via "o" or "O" keys and updating
cursor position with regular cursor motion keys.  Obviously, once initial cursor
position is altered this way, real start position becomes unavailable.

Plain Vim-like visual mode starts with cleared selection, which is not restored
on rejecting selection ("Escape", "Ctrl-C", "v", "V").  Contrary to it,
selection editing doesn't clear previously selected files and restores them
after reject.  Accepting selection by performing an operation on selected
items (e.g. yanking them via "y") moves cursor to the top of current selection
region (not to the top most selected file of the view).

In turn, selection editing supports three types of editing (look at statusbar
to know which one is currently active):
.RS 2
.IP \- 2
append \- amend selection by selecting elements in selection region;
.IP \- 2
remove \- amend selection by deselecting elements in selection region;
.IP \- 2
invert \- amend selection by inverting selection of elements in selection \
region.
.RE

No matter how you activate selection editing it starts in "append".  One can
switch type of operation (in the order given above) via "Ctrl-G" key.

Almost all normal mode keys work in visual mode, but instead of accepting
selectors they operate on selected items.
.TP
.BI Enter
save selection and go back to normal mode not moving cursor.
.TP
.BI av
leave visual mode if in amending mode (restores previous selection), otherwise
switch to amending selection mode.
.TP
.BI gv
restore previous visual selection.
.TP
.BI "v, V, Ctrl-C or Escape"
leave visual mode if not in amending mode, otherwise switch to normal visual
selection.
.TP
.BI Ctrl-G
switch type of amending by round robin scheme: append \-> remove \-> invert.
.TP
.BI :
enter command line mode.  Selection is cleared on leaving the mode.
.TP
.BI o
switch active selection bound.
.TP
.BI O
switch active selection bound.
.TP
.BI "gu, u"
make names of selected files lowercase.
.TP
.BI "gU, U"
make names of selected files uppercase.
.\" ---------------------------------------------------------------------------
.SH View Mode
.\" ---------------------------------------------------------------------------
This mode tries to imitate the less program.  List of builtin shortcuts can be
found below.  Shortcuts can be customized using :qmap, :qnoremap and :qunmap
command-line commands.
.TP
.BI "Shift-Tab, Tab, q, Q, ZZ"
return to normal mode.
.TP
.BI "[count]e, [count]Ctrl-E, [count]j, [count]Ctrl-N, [count]Enter"
scroll forward one line (or [count] lines).
.TP
.BI "[count]y, [count]Ctrl-Y, [count]k, [count]Ctrl-K, [count]Ctrl-P"
scroll backward one line (or [count] lines).
.TP
.BI "[count]f, [count]Ctrl-F, [count]Ctrl-V, [count]Space"
scroll forward one window (or [count] lines).
.TP
.BI "[count]b, [count]Ctrl-B, [count]Alt-V"
scroll backward one window (or [count] lines).
.TP
.BI [count]z
scroll forward one window (and set window to [count]).
.TP
.BI [count]w
scroll backward one window (and set window to [count]).
.TP
.BI [count]Alt-Space
scroll forward one window, but don't stop at end-of-file.
.TP
.BI "[count]d, [count]Ctrl-D"
scroll forward one half-window (and set half-window to [count]).
.TP
.BI "[count]u, [count]Ctrl-U"
scroll backward one half-window (and set half-window to [count]).
.TP
.BI "r, Ctrl-R, Ctrl-L"
repaint screen.
.TP
.BI R
reload view preserving scroll position.
.TP
.BI F
toggle automatic forwarding.  Roughly equivalent to periodic file reload and
scrolling to the bottom.  The behaviour is similar to `tail \-F` or F key in
less.
.TP
.BI [count]/pattern
search forward for ([count]\(hyth) matching line.
.TP
.BI [count]?pattern
search backward for ([count]\(hyth) matching line.
.TP
.BI [count]n
repeat previous search (for [count]\(hyth occurrence).
.TP
.BI [count]N
repeat previous search in reverse direction (for [count]\(hyth occurrence).
.TP
.BI "[count]g, [count]<, [count]Alt-<"
scroll to the first line of the file (or line [count]).
.TP
.BI "[count]G, [count]>, [count]Alt->"
scroll to the last line of the file (or line [count]).
.TP
.BI "[count]p, [count]%"
scroll to the beginning of the file (or N percent into file).
.TP
.BI v
invoke an editor to edit the current file being viewed.  The command for editing
is taken from the 'vicmd'/'vixcmd' option value and extended with middle line
number prepended by a plus sign and name of the current file.
.LP
All "Ctrl-W x" keys work the same was as in Normal mode.  Active mode is
automatically changed on navigating among windows.  When less-like mode
activated on file preview is left using one by "Ctrl-W x" keys, its state is
stored until another file is displayed using preview (it's possible to leave the
mode, hide preview pane, do something else, then get back to the file and show
preview pane again with previously stored state in it).
.\" ---------------------------------------------------------------------------
.SH Command line Mode
.\" ---------------------------------------------------------------------------
These keys are available in all submodes of the command line mode: command,
search, prompt and filtering.
.LP
Down, Up, Left, Right, Home, End and Delete are extended keys and they are not
available if vifm is compiled with \-\-disable\-extended\-keys option.
.TP
.BI "Esc, Ctrl-C"
leave command line mode, cancels input.  Cancelled input is saved into
appropriate history and can be recalled later.
.TP
.BI "Ctrl-M, Enter"
execute command and leave command line mode.
.TP
.BI "Ctrl-I, Tab"
complete command or its argument.
.TP
.BI Shift-Tab
complete in reverse order.
.TP
.BI Ctrl-_
stop completion and return original input.
.TP
.BI "Ctrl-B, Left"
move cursor to the left.
.TP
.BI "Ctrl-F, Right"
move cursor to the right.
.TP
.BI "Ctrl-A, Home"
go to line beginning.
.TP
.BI "Ctrl-E, End"
go to line end.
.TP
.BI Alt-B
go to the beginning of previous word.
.TP
.BI Alt-F
go to the end of next word.
.TP
.BI Ctrl-U
remove characters from cursor position till the beginning of line.
.TP
.BI Ctrl-K
remove characters from cursor position till the end of line.
.TP
.BI "Ctrl-H, Backspace"
remove character before the cursor.
.TP
.BI "Ctrl-D, Delete"
remove character under the cursor.
.TP
.BI Ctrl-W
remove characters from cursor position till the beginning of previous word.
.TP
.BI Alt-D
remove characters from cursor position till the beginning of next word.
.TP
.BI Ctrl-T
swap the order of current and previous character and move cursor forward or, if
cursor past the end of line, swap the order of two last characters in the line.
.TP
.BI Alt-.
insert last part of previous command to current cursor position.  Each next call
will insert last part of older command.
.TP
.BI Ctrl-G
edit command-line content in external editor.  See "Command line editing"
section for details.
.TP
.BI Ctrl-N
recall more recent command-line from history.
.TP
.BI Ctrl-P
recall older command-line from history.
.TP
.BI Up
recall more recent command-line from history, that begins as the current
command-line.
.TP
.BI Down
recall older command-line from history, that begins as the current command-line.
.TP
.BI Ctrl-]
trigger abbreviation expansion.
.\" ---------------------------------------------------------------------------
.SH Pasting special values
.\" ---------------------------------------------------------------------------
The shortcuts listed below insert specified values into current cursor
position.  Last key of every shortcut references value that it inserts:
  \- c \- [c]urrent file
  \- d \- [d]irectory path
  \- e \- [e]xtension of a file name
  \- r \- [r]oot part of a file name
  \- t \- [t]ail part of directory path

  \- a \- [a]utomatic filter
  \- m \- [m]anual filter
  \- = \- local filter, which is bound to "=" in normal mode

Values related to filelist in current pane are available through Ctrl-X
prefix, while values from the other pane have doubled Ctrl-X key as their
prefix (doubled Ctrl-X is presumably easier to type than uppercase
letters; it's still easy to remap the keys to correspond to names of
similar macros).
.TP
.BI "Ctrl-X c"
name of the current file of the active pane.
.TP
.BI "Ctrl-X d"
path to the current directory of the active pane.
.TP
.BI "Ctrl-X e"
extension of the current file of the active pane.
.TP
.BI "Ctrl-X r"
name root of current file of the active pane.
.TP
.BI "Ctrl-X t"
the last component of path to the current directory of the active pane.
.TP
.BI "Ctrl-X Ctrl-X c"
name of the current file of the inactive pane.
.TP
.BI "Ctrl-X Ctrl-X d"
path to the current directory of the inactive pane.
.TP
.BI "Ctrl-X Ctrl-X e"
extension of the current file of the inactive pane.
.TP
.BI "Ctrl-X Ctrl-X r"
name root of current file of the inactive pane.
.TP
.BI "Ctrl-X Ctrl-X t"
the last component of path to the current directory of the inactive pane.

.TP
.BI "Ctrl-X a"
value of automatic filter of the active pane.
.TP
.BI "Ctrl-X m"
value of manual filter of the active pane.
.TP
.BI "Ctrl-X ="
value of local filter of the active pane.

.TP
.BI "Ctrl-X /"
last pattern from search history.
.\" ---------------------------------------------------------------------------
.SH Command line editing
.\" ---------------------------------------------------------------------------
vifm provides a facility to edit several kinds of data, that is usually edited
in command-line mode, in external editor (using command specified by
\(aqvicmd\(aq or 'vixcmd' option).  This has at least two advantages
over built-in command-line mode:
  \- one can use full power of Vim to edit text;
  \- finding and reusing history entries becomes possible.

The facility is supported by four input submodes of the command-line:
  \- command;
  \- forward search;
  \- backward search;
  \- file rename (see description of cw and cW normal mode keys).

Editing command-line using external editor is activated by the Ctrl-G
shortcut.  It's also possible to do almost the same from Normal and Visual
modes using q:, q/ and q? commands.

Temporary file created for the purpose of editing the line has the following
structure:
.RS 2
.IP 1. 3
First line, which is either empty or contains text already entered in
command-line.
.IP 2. 3
2nd and all other lines with history items starting with the most recent one.
Altering this lines in any way won't change history items stored by vifm.
.RE

After editing application is finished the first line of the file is taken as
the result of operation, when the application returns zero exit code.  If the
application returns an error (see :cquit command in Vim), all the edits made to
the file are ignored, but the initial value of the first line is saved in
appropriate history.
.\" ---------------------------------------------------------------------------
.SH More Mode
.\" ---------------------------------------------------------------------------
This is the mode that appears when status bar content is so big that it
doesn't fit on the screen.  One can identify the mode by "\-\- More \-\-"
message at the bottom.

The following keys are handled in this mode:

.TP
.BI "Enter, Ctrl-J, j or Down"
scroll one line down.
.TP
.BI "Backspace, k or Up"
scroll one line up.

.TP
.BI d
scroll one page (half of a screen) down.
.TP
.BI u
scroll one page (half of a screen) up.

.TP
.BI "Space, f or PageDown"
scroll down a screen.
.TP
.BI "b or PageUp"
scroll up a screen.

.TP
.BI G
scroll to the bottom.
.TP
.BI g
scroll to the top.

.TP
.BI "q, Escape or Ctrl-C"
quit the mode.
.TP
.BI :
switch to command-line mode.
.\" ---------------------------------------------------------------------------
.SH Commands
.\" ---------------------------------------------------------------------------
Commands are executed with :command_name<Enter>

Commented out lines should start with the double quote symbol ("), which may be
preceded by whitespace characters intermixed with colons.  Inline comments can
be added at the end of the line after double quote symbol, only last line of a
multi-line command can contain such comment.  Not all commands support inline
comments as their syntax conflicts with names of registers and fields where
double quotes are allowed.

Most of the commands have two forms: complete and the short one.
Example:
.EX

  :noh[lsearch]

.EE
This means the complete command is nohlsearch, and the short one is noh.

Most of command-line commands completely reset selection in the current view.
However, there are several exceptions:
.RS 2
.IP \- 2
":invert s" most likely leaves some files selected;
.IP \- 2
:if and :else commands doesn't affect selection on successful execution.
.RE

\(aq|\(aq can be used to separate commands, so you can give multiple commands in one
line.  If you want to use '|' in an argument, precede it with '\\'.

These commands see '|' as part of their arguments even when it's escaped:

    :[range]!
    :autocmd
    :cmap
    :cnoremap
    :command
    :dmap
    :dnoremap
    :filetype
    :fileviewer
    :filextype
    :map
    :mmap
    :mnoremap
    :nmap
    :nnoremap
    :noremap
    :normal
    :qmap
    :qnoremap
    :vmap
    :vnoremap
    :wincmd
    :windo
    :winrun

To be able to use another command after one of these, wrap it with the :execute
command.  An example:
.EX

  if filetype('.') == 'reg' | execute '!!echo regular file' | endif
.EE
.TP
.BI :[count]
.TP
.BI :number
move to the file number.
.br
:12 would move to the 12th file in the list.
.br
:0 move to the top of the list.
.br
:$ move to the bottom of the list.
.TP
.BI :[count]command
The only builtin :[count]command are :[count]d[elete] and :[count]y[ank].
.TP
.BI :d3
would delete three files starting at the current file position moving down.
.TP
.BI :3d
would delete one file at the third line in the list.
.TP
.BI ":command [args]"
.TP
.BI :[range]!program
execute command via shell.  Accepts macros.
.TP
.BI ":[range]!command &"
.LP
same as above, but the command is run in the background using vifm's means.

Programs that write to stdout like "ls" create an error message
showing partial output of the command.

Note the space before ampersand symbol, if you omit it, command
will be run in the background using job control of your shell.

Accepts macros.
.TP
.BI "                                         :!!"
.TP
.BI ":[range]!!command"
same as :!, but pauses before returning.
.TP
.BI :!!
repeat the last command.
.TP
.BI "                                         :alink"
.TP
.BI :[range]alink[!?]
create absolute symbolic links to files in directory of inactive view.  With "?"
prompts for destination file names in an editor.  "!" forces overwrite.
.TP
.BI ":[range]alink[!] path"
create absolute symbolic links to files in directory specified by the path
(absolute or relative to directory of inactive view).
.TP
.BI ":[range]alink[!] name1 name2..."
create absolute symbolic links of files in directory of other view giving each
next link a corresponding name from the argument list.
.TP
.BI "                                         :apropos"
.TP
.BI ":apropos keyword..."
create a menu of items returned by the apropos command.  Selecting an item in
the menu opens corresponding man page.  By default the command relies on the
external "apropos" utility, which can be customized by altering value of
the 'aproposprg' option.
.TP
.BI "                                         :autocmd"
.TP
.BI ":au[tocmd] {event} {pat} {cmd}"
register autocommand for the {event}, which can be:
  \- DirEnter \- performed on entering a directory
.br
Event name is case insensitive.

{pat} is a comma-separated list of modified globs patterns, which can
contain tilde or environment variables.  All paths use slash ('/') as
directory separator.  The pattern can start with a '!', which negates it.
Patterns that do not contain slashes are matched against the last item of
the path only (e.g. "dir" in "/path/dir").  Literal comma can be entered by
doubling it.  Two modifications to globs matching are as follows:
  \- *  \- never matches a slash (i.e., can signify single directory level)
  \- ** \- matches any character (i.e., can match path of arbitrary depth)

{cmd} is a :command or several of them separated with '|'.

Examples of patterns:
  \- conf.d      \- matches conf.d directory anywhere
  \- *.d         \- matches directories ending with ".d" anywhere
  \- **.git      \- matches something.git, but not .git anywhere
  \- **/.git/**  \- matches /path/.git/objects, but not /path/.git
  \- **/.git/**/ \- matches /path/.git/ only (because of trailing slash)
  \- /etc/*      \- matches /etc/conf.d/, /etc/X11, but not /etc/X11/fs
  \- /etc/**/*.d \- matches /etc/conf.d, /etc/X11/conf.d, etc.
  \- /etc/**/*   \- matches /etc/ itself and any file below it
  \- /etc/**/**  \- matches /etc/ itself and any file below it
.TP
.BI ":au[tocmd] [{event}] [{pat}]"
list those autocommands that match given event-pattern combination.
.br
{event} and {pat} can be omitted to list all autocommands.  To list any
autocommands for specific pattern one can use * placeholder in place of
{event}.
.TP
.BI ":au[tocmd]! [{event}] [{pat}]"
remove autocommands that match given event-pattern combination.  Syntax
is the same as for listing above.
.TP
.BI :apropos
repeat last :apropos command.
.TP
.BI "                                         :bmark"
.TP
.BI ":bmark tag1 [tag2 [tag3...]]"
bookmark current directory with specified tags.
.TP
.BI ":bmark! path tag1 [tag2 [tag3...]]"
same as :bmark, but allows bookmarking specific path instead of current
directory.  This is for use in vifmrc and for bookmarking files.

Path can contain macros that expand to single path (%c, %C, %d, %D) or
those that can expand to multiple paths, but contain only one (%f, %F,
%rx).  The latter is done for convenience on using the command
interactively.  Complex macros that include spaces (e.g. "%c:gs/ /_")
should be escaped.
.TP
.BI "                                         :bmarks"
.TP
.BI :bmarks
display all bookmarks in a menu.
.TP
.BI ":bmarks [tag1 [tag2...]]"
display menu of bookmarks that include all of the specified tags.
.TP
.BI "                                         :bmgo"
.TP
.BI ":bmgo [tag1 [tag2...]]"
when there are more than one match acts exactly like :bmarks, otherwise
navigates to single match immediately (and fails if there is no match).
.TP
.BI "                                         :cabbrev"
.TP
.BI ":ca[bbrev]"
display menu of command-line mode abbreviations.
.TP
.BI ":ca[bbrev] lhs-prefix"
display command-line mode abbreviations which left-hand side starts with
specified prefix.
.TP
.BI ":ca[bbrev] lhs rhs"
register new or overwrites existing abbreviation for command-line mode.  rhs
can contain spaces and any special sequences accepted in rhs of mappings (see
"Mappings" section below).  Abbreviations are expanded non-recursively.
.TP
.BI "                                         :cnoreabbrev"
.TP
.BI ":cnorea[bbrev]"
display menu of command-line mode abbreviations.
.TP
.BI ":cnorea[bbrev] lhs-prefix"
display command-line mode abbreviations which left-hand side starts with
specified prefix.
.TP
.BI ":cnorea[bbrev] lhs rhs"
same as :cabbrev, but mappings in rhs are ignored during expansion.
.TP
.BI "                                         :cd"
.TP
.BI ":cd or :cd ~ or :cd $HOME"
change to home directory.
.TP
.BI ":cd \-"
go to the last visited directory.
.TP
.BI ":cd ~/dir"
change directory to ~/dir.
.TP
.BI ":cd /curr/dir /other/dir"
change directory of the current pane to /curr/dir and directory of the other
pane to /other/dir.  Relative paths are assumed to be relative to directory of
current view.  Command won't fail if one of directories is invalid.  All forms
of the command accept macros.
.TP
.BI ":cd! /dir"
same as :cd /dir /dir.
.TP
.BI "                                         :change"
.TP
.BI :c[hange]
create a menu window to alter a files properties.
.TP
.BI "                                         :chmod"
.TP
.BI :[range]chmod
.br
display file attributes (permission on *nix and properties on Windows) change
dialog.
.TP
.BI ":[range]chmod[!] arg..."
only for *nix
.br
change permissions for files.  See `man 1 chmod` for arg format.  "!" means set
permissions recursively.
.TP
.BI "                                         :chown"
.TP
.BI :[range]chown
only for *nix
.br
same as co key in normal mode.
.TP
.BI ":[range]chown [user][:][group]"
only for *nix
.br
change owner and/or group of files.  Operates on directories recursively.
.TP
.BI "                                         :clone"
.TP
.BI :[range]clone[!?]
clones files in current directory.  With "?" vifm will open vi to edit
file names.  "!" forces overwrite.  Macros are expanded.
.TP
.BI ":[range]clone[!] path"
clones files to directory specified with the path (absolute or relative to
current directory).  "!" forces overwrite.  Macros are expanded.
.TP
.BI ":[range]clone[!] name1 name2..."
clones files in current directory giving each next clone a corresponding name
from the argument list.  "!" forces overwrite.  Macros are expanded.
.TP
.BI "                                         :colorscheme"
.TP
.BI :colo[rscheme]?
print current color scheme name on the status bar.
.TP
.BI :colo[rscheme]
display a menu with a list of available color schemes.  You can choose primary
color scheme here.  It is used for view if no directory specific colorscheme
fits current path.  It's also used to set border color (except view titles) and
colors in menus and dialogs.
.TP
.BI ":colo[rscheme] color_scheme_name"
change primary color scheme to color_scheme_name.  In case of errors (e.g. some
colors are not supported by terminal) either nothing is changed or color scheme
is reset to builtin colors to ensure that TUI is left in a usable state.
.TP
.BI ":colo[rscheme] color_scheme_name directory"
associate directory with the color scheme.  The directory argument can be either
absolute or relative path when :colorscheme command is executed from command
line, but mandatory should be an absolute path when the command is executed in
scripts loaded at startup (until vifm is completely loaded).
.TP
.BI "                                         :comclear"
.TP
.BI :comc[lear]
remove all user defined commands.
.TP
.BI "                                         :command"
.TP
.BI :com[mand]
display a menu of user commands.
.TP
.BI ":com[mand] beginning"
display user defined commands that start with the beginning.
.TP
.BI ":com[mand] name action"
set a new user command.
.br
Trying to use a reserved command name will result in an error message.
.br
Use :com[mand]! to overwrite a previously set command.
.br
Unlike vim user commands do not have to start with a capital letter.
User commands are run in a shell by default.  To run a command in
the background you must set it as a background command with & at the end
of the commands action (:com rm rm %f &).  Command name cannot contain
numbers or special symbols (except '?' and '!').
.TP
.BI ":com[mand] name /pattern"
set search pattern.
.TP
.BI ":com[mand] name =pattern"
set local filter value.
.TP
.BI ":com[mand] name filter{:filter args}"
set file name filter (see :filter command description).  For example:
.EX

  " display only audio files
  :command onlyaudio filter/.+\.\\(mp3|wav|mp3|flac|ogg|m4a|wma|ape\\)$/i
  " display everything except audio files
  :command noaudio filter!/.+\.\\(mp3|wav|mp3|flac|ogg|m4a|wma|ape\\)$/i
.EE
.TP
.BI ":com[mand] cmd :commands"
set kind of an alias for internal command (like in a shell).  Passes range
given to alias to an aliased command, so running :%cp after
  :command cp :copy %a
.br
equals
  :%copy
.TP
.BI "                                         :compare"
.TP
.BI ":compare [byname | bysize | bycontents | listall | listunique | listdups |\
 ofboth | ofone | groupids | grouppaths | skipempty]..."
compare files in one or two views according the arguments.  The default
is "bycontents listall ofboth grouppaths".  See "Compare views" section below
for details.  Tree structure is incompatible with ls-like view, so value of
\'lsview' option is ignored.
.TP
.BI "                                         :copen"
.TP
.BI ":cope[n]"
opens menu with contents of the last displayed menu with navigation to files by
default, if any.
.TP
.BI "                                         :copy"
.TP
.BI ":[range]co[py][!?][ &]"
copy files to directory of other view.  With "?" prompts for destination file
names in an editor.  "!" forces overwrite.
.TP
.BI ":[range]co[py][!] path[ &]"
copy files to directory specified with the path (absolute or relative to
directory of other view).  "!" forces overwrite.
.TP
.BI ":[range]co[py][!] name1 name2...[ &]"
copy files to directory of other view giving each next file a corresponding name
from the argument list.  "!" forces overwrite.
.TP
.BI "                                         :cquit"
.TP
.BI ":cq[uit][!]"
same as :quit, but also aborts directory choosing via \-\-choose\-dir (empties
output file) and returns non-zero exit code.
.TP
.BI "                                         :cunabbrev"
.TP
.BI ":cuna[bbrev] lhs"
unregister command-line mode abbreviation by its lhs.
.TP
.BI ":cuna[bbrev] rhs"
unregister command-line mode abbreviation by its rhs, so that abbreviation
could be removed even after expansion.
.TP
.BI "                                         :delbmarks"
.TP
.BI :delbmarks
remove bookmarks from current directory.
.TP
.BI ":delbmarks tag1 [tag2 [tag3...]]"
remove set of bookmarks that include all of the specified tags.
.TP
.BI :delbmarks!
remove all bookmarks.
.TP
.BI ":delbmarks! path1 [path2 [path3...]]"
remove bookmarks of listed paths.
.TP
.BI "                                         :delcommand"
.TP
.BI ":delc[ommand] user_command"
remove user defined command named user_command.
.TP
.BI "                                         :delete"
.TP
.BI ":[range]d[elete][!][ &]"
delete selected file or files.  "!" means complete removal (omitting trash).
.TP
.BI ":[range]d[elete][!] [reg] [count][ &]"
delete selected or [count] files to the reg register.  "!" means complete
removal (omitting trash).
.TP
.BI "                                         :delmarks"
.TP
.BI :delm[arks]!
delete all marks.
.TP
.BI ":delm[arks] marks ..."
delete specified marks, each argument is treated as a set of marks.
.TP
.BI "                                         :display"
.TP
.BI :di[splay]
display menu with registers content.
.TP
.BI ":di[splay] list ..."
display the contents of the numbered and named registers that are mentioned in
list (for example "az to display "", "a and "z content).
.TP
.BI "                                         :dirs"
.TP
.BI :dirs
display directory stack.
.TP
.BI "                                         :echo"
.TP
.BI ":ec[ho] [<expr>...]"
evaluate each argument as an expression and output them separated with a space.
See help on :let command for a definition of <expr>.
.TP
.BI "                                         :edit"
.TP
.BI ":[range]e[dit] [file...]"
open selected or passed file(s) in editor.  Macros and environment variables are
expanded.
.TP
.BI "                                         :else"
.TP
.BI :el[se]
execute commands until next matching :endif if all other conditions didn't
match.  See also help on :if and :endif commands.
.TP
.BI "                                         :elseif"
.TP
.BI ":elsei[f] {expr1}"
execute commands until next matching :elseif, :else or :endif if conditions of
previous :if and :elseif branches were evaluated to zero.  See also help on :if
and :endif commands.
.TP
.BI "                                         :empty"
.TP
.BI :empty
permanently remove files from all existing non-empty trash directories (see
"Trash directory" section below).  Also remove all operations from undolist that
have no sense after :empty and remove all records about files located inside
directories from all registers.  Removal is performed as background task with
undetermined amount of work and can be checked via :jobs menu.
.TP
.BI "                                         :endif"
.TP
.BI :en[dif]
end conditional block.  See also help on :if and :else commands.
.TP
.BI "                                         :execute"
.TP
.BI ":exe[cute] [<expr>...]"
evaluate each argument as an expression and join results separated by a space to
get a single string which is then executed as a command-line command.  See help
on :let command for a definition of <expr>.
.TP
.BI "                                         :exit"
.TP
.BI :exi[t][!]
same as :quit.
.TP
.BI "                                         :file"
.TP
.BI ":f[ile][ &]"
display menu of programs set for the file type of the current file.  " &" forces
running associated program in background.
.TP
.BI ":f[ile] arg[ &]"
run associated command that begins with the arg skipping opening menu.  " &"
forces running associated program in background.
.TP
.BI "                                         :filetype"
.TP
.BI ":filet[ype] pattern-list [{descr}]def_prog[ &],[{descr}]prog2[ &],..."
associate given program list to each of the patterns.  Associated
program (command) is used by handlers of l and Enter keys (and also in
the :file menu).  If you need to insert comma into command just double it
(",,").  Space followed by an ampersand as two last characters of a command
means running of the command in the background.  Optional description can be
given to each command to ease understanding of what command will do in the
:file menu.  Vifm will try the rest of the programs for an association when
the default isn't found.  When program entry doesn't contain any of vifm
macros, name of current file is appended as if program entry ended with %c
macro on *nix and %"c on Windows.  On Windows path to executables containing
spaces can (and should be for correct work with such paths) be double quoted.
See "Patterns" section below for pattern definition.  See also
"Automatic FUSE mounts" section below.  Example for zip archives and several
actions:

.EX
  filetype *.zip,*.jar,*.war,*.ear
         \\ {Mount with fuse-zip}
         \\ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
         \\ {View contents}
         \\ zip \-sf %c | less,
         \\ {Extract here}
         \\ tar \-xf %c,
.EE
.TP
.BI ":filet[ype] filename"
list (in menu mode) currently registered patterns that match specified file
name.  Same as ":filextype filename".
.TP
.BI "                                         :filextype"
.TP
.BI ":filex[type] pattern-list [{ description }] def_program,program2,..."
same as :filetype, but this command is ignored if not running in X.
In X :filextype is equal to :filetype.  See "Patterns" section below for pattern
definition.  See also "Automatic FUSE mounts" section below.

For example, consider the following settings (the order might seem strange,
but it's for the demonstration purpose):

.EX
  filetype *.html,*.htm
          \\ {View in lynx}
          \\ lynx
  filextype *.html,*.htm
          \\ {Open with dwb}
          \\ dwb %f %i &,
  filetype *.html,*.htm
          \\ {View in links}
          \\ links
  filextype *.html,*.htm
          \\ {Open with firefox}
          \\ firefox %f &,
          \\ {Open with uzbl}
          \\ uzbl-browser %f %i &,
.EE

If you're using vifm inside a terminal emulator that is running in graphical
environment (when X is used on *nix; always on Windows), vifm attempts to run
application in this order:

1. lynx
.br
2. dwb
.br
3. links
.br
4. firefox
.br
5. uzbl

If there is no graphical environment (checked presence of $DISPLAY
environment variable on *nix; never happens on Windows), the list will look
like:

1. lynx
.br
2. links

Just as if all :filextype commands were not there.

The purpose of such differentiation is to allow comfortable use of vifm
with same settings in desktop environment/through remote connection (SSH)/\
in native console.
.TP
.BI ":filext[ype] filename"
list (in menu mode) currently registered patterns that match specified file
name.  Same as ":filetype filename".
.TP
.BI "                                         :fileviewer"
.TP
.BI ":filev[iewer] pattern-list command1,command2,..."
register specified list of commands as viewers for each of the patterns.
Viewer is a command which output is captured and displayed in one of the panes
of vifm after pressing "e" or running :view command.  When the command doesn't
contain any of vifm macros, name of current file is appended as if command
ended with %c macro.  Comma escaping and missing commands processing rules as
for :filetype apply to this command.  See "Patterns" section below for pattern
definition.

Example for zip archives:
.EX

  fileviewer *.zip,*.jar,*.war,*.ear zip \-sf %c, echo "No zip to preview:"
.EE
.TP
.BI ":filev[iewer] filename"
list (in menu mode) currently registered patterns that match specified filename.
.TP
.BI "                                         :filter"
.TP
.BI ":filter[!] regular_expression_pattern"
.TP
.BI ":filter[!] /regular_expression_pattern/[flags]"
will filter all the files out of the directory listing that match the regular
expression.  Using second variant you can use the bar ('|') symbol without
escaping.  Empty regular expression (specified by //, "" or '') means using of
the last search pattern.  Use '!' to control state of filter inversion after
updating filter value (also see 'cpoptions' description).  Filter is matched
case sensitively on *nix and case insensitively on Windows.

Supported flags:
  \- "i" makes filter case insensitive;
  \- "I" makes filter case sensitive.

Flags might be repeated multiple times, later ones win (e.g. "iiiI" is
equivalent to "I" and "IiIi" is the same as "i").

.EX
" filter all files ending in .o from the filelist.
:filter /\.o$/
.EE

Note: vifm uses extended regular expressions.
.TP
.BI ":filter"
reset filter (set it to empty string) and show all files.
.TP
.BI ":filter!"
same as :invert.
.TP
.BI :filter?
show information on local, name and auto filters.
.TP
.BI "                                         :find"
.TP
.BI ":[range]fin[d] pattern"
display results of find command in the menu.  Searches among selected files if
any.  Accepts macros.  By default the command relies on the external "find"
utility, which can be customized by altering value of the 'findprg' option.
.TP
.BI ":[range]fin[d] \-opt..."
same as :find above, but user defines all find arguments.  Searches among
selected files if any.
.TP
.BI ":[range]fin[d] path \-opt..."
same as :find above, but user defines all find arguments.  Ignores selection and
range.
.TP
.BI :[range]fin[d]
repeat last :find command.
.TP
.BI "                                         :finish"
.TP
.BI :fini[sh]
stop sourcing a script. Can only be used in a vifm script file. This is a quick
way to skip the rest of the file.
.TP
.BI "                                         :grep"
.TP
.BI ":[range]gr[ep][!] pattern"
will show results of grep command in the menu.  Add "!" to request inversion of
search (look for lines that do not match pattern).  Searches among selected
files if any and no range given.  Ignores binary files by default.  By default
the command relies on the external "grep" utility, which can be customized by
altering value of the 'grepprg' option.
.TP
.BI ":[range]gr[ep][!] \-opt..."
same as :grep above, but user defines all grep arguments, which are not escaped.
Searches among selected files if any.
.TP
.BI :[range]gr[ep][!]
repeats last :grep command.  "!" of this command inverts "!" in repeated
command.
.TP
.BI "                                         :help"
.TP
.BI :h[elp]
show the help file.
.TP
.BI ":h[elp] argument"
is the same as using ':h argument' in vim.  Use vifm\-<something> to get help
on vifm (tab completion works).  This form of the command doesn't work when
\(aqvimhelp\(aq option is off.
.TP
.BI "                                         :highlight"
.TP
.BI :hi[ghlight]
will show information about all highlight groups in the current directory.
.TP
.BI ":hi[ghlight] clear"
will reset all highlighting to builtin defaults.
.TP
.BI ":hi[ghlight] ( group\-name | {pat1,pat2,...} | /regexp/ )"
will show information on given highlight group or file name pattern of color
scheme used in the active view.
.TP
.BI ":hi[ghlight] ( group\-name | {pat1,pat2,...} | /regexp/[iI] ) cterm=style | ctermfg=color | ctermbg=color"
sets style (cterm), foreground (ctermfg) or/and background (ctermbg) parameters
of highlight group or file name pattern for color scheme used in the active
view.
.LP
All style values as well as color names are case insensitive.
.LP
Available style values (some of them can be combined):
 \- bold
 \- underline
 \- reverse or inverse
 \- standout
 \- none

Available group-name values:
 \- Win \- color of all windows (views, dialogs, menus) and default color for \
their content (e.g. regular files in views)
 \- Border \- color of vertical parts of the border
 \- TopLineSel \- top line color of the current pane
 \- TopLine \- top line color of the other pane
 \- CmdLine \- the command line/status bar color
 \- ErrorMsg \- color of error messages in the status bar
 \- StatusLine \- color of the line above the status bar
 \- JobLine \- color of job line that appears above the status line
 \- WildMenu \- color of the wild menu items
 \- SuggestBox \- color of key suggestion box
 \- CurrLine \- line at cursor position in active view
 \- OtherLine \- line at cursor position in inactive view
 \- Selected \- color of selected files
 \- Directory \- color of directories
 \- Link \- color of symbolic links in the views
 \- BrokenLink \- color of broken symbolic links
 \- Socket \- color of sockets
 \- Device \- color of block and character devices
 \- Executable \- color of executable files
 \- Fifo \- color of fifo pipes
 \- CmpMismatch \- color of mismatched files in side-by-side comparison by path

Available colors:
 \- \-1 or default or none \- default or transparent
 \- black   and lightblack
 \- red     and lightred
 \- green   and lightgreen
 \- yellow  and lightyellow
 \- blue    and lightblue
 \- magenta and lightmagenta
 \- cyan    and lightcyan
 \- white   and lightwhite
 \- 0-255 \- corresponding colors from 256-color palette

Light versions of colors are regular colors with bold attribute set.  So order
of arguments of :highlight command is important and it's better to put "cterm"
in front of others to prevent it from overwriting attributes set by "ctermfg" or
"ctermbg" arguments.

For convenience of color scheme authors xterm-like names for 256 color palette
is also supported.  The mapping is taken from
http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
Duplicated entries were altered by adding an underscore followed by numerical
suffix.

  0 Black                  86 Aquamarine1           172 Orange3
  1 Red                    87 DarkSlateGray2        173 LightSalmon3_2
  2 Green                  88 DarkRed_2             174 LightPink3
  3 Yellow                 89 DeepPink4_2           175 Pink3
  4 Blue                   90 DarkMagenta           176 Plum3
  5 Magenta                91 DarkMagenta_2         177 Violet
  6 Cyan                   92 DarkViolet            178 Gold3_2
  7 White                  93 Purple                179 LightGoldenrod3
  8 LightBlack             94 Orange4_2             180 Tan
  9 LightRed               95 LightPink4            181 MistyRose3
 10 LightGreen             96 Plum4                 182 Thistle3
 11 LightYellow            97 MediumPurple3         183 Plum2
 12 LightBlue              98 MediumPurple3_2       184 Yellow3_2
 13 LightMagenta           99 SlateBlue1            185 Khaki3
 14 LightCyan             100 Yellow4               186 LightGoldenrod2
 15 LightWhite            101 Wheat4                187 LightYellow3
 16 Grey0                 102 Grey53                188 Grey84
 17 NavyBlue              103 LightSlateGrey        189 LightSteelBlue1
 18 DarkBlue              104 MediumPurple          190 Yellow2
 19 Blue3                 105 LightSlateBlue        191 DarkOliveGreen1
 20 Blue3_2               106 Yellow4_2             192 DarkOliveGreen1_2
 21 Blue1                 107 DarkOliveGreen3       193 DarkSeaGreen1_2
 22 DarkGreen             108 DarkSeaGreen          194 Honeydew2
 23 DeepSkyBlue4          109 LightSkyBlue3         195 LightCyan1
 24 DeepSkyBlue4_2        110 LightSkyBlue3_2       196 Red1
 25 DeepSkyBlue4_3        111 SkyBlue2              197 DeepPink2
 26 DodgerBlue3           112 Chartreuse2_2         198 DeepPink1
 27 DodgerBlue2           113 DarkOliveGreen3_2     199 DeepPink1_2
 28 Green4                114 PaleGreen3_2          200 Magenta2_2
 29 SpringGreen4          115 DarkSeaGreen3         201 Magenta1
 30 Turquoise4            116 DarkSlateGray3        202 OrangeRed1
 31 DeepSkyBlue3          117 SkyBlue1              203 IndianRed1
 32 DeepSkyBlue3_2        118 Chartreuse1           204 IndianRed1_2
 33 DodgerBlue1           119 LightGreen_2          205 HotPink
 34 Green3                120 LightGreen_3          206 HotPink_2
 35 SpringGreen3          121 PaleGreen1            207 MediumOrchid1_2
 36 DarkCyan              122 Aquamarine1_2         208 DarkOrange
 37 LightSeaGreen         123 DarkSlateGray1        209 Salmon1
 38 DeepSkyBlue2          124 Red3                  210 LightCoral
 39 DeepSkyBlue1          125 DeepPink4_3           211 PaleVioletRed1
 40 Green3_2              126 MediumVioletRed       212 Orchid2
 41 SpringGreen3_2        127 Magenta3              213 Orchid1
 42 SpringGreen2          128 DarkViolet_2          214 Orange1
 43 Cyan3                 129 Purple_2              215 SandyBrown
 44 DarkTurquoise         130 DarkOrange3           216 LightSalmon1
 45 Turquoise2            131 IndianRed             217 LightPink1
 46 Green1                132 HotPink3              218 Pink1
 47 SpringGreen2_2        133 MediumOrchid3         219 Plum1
 48 SpringGreen1          134 MediumOrchid          220 Gold1
 49 MediumSpringGreen     135 MediumPurple2         221 LightGoldenrod2_2
 50 Cyan2                 136 DarkGoldenrod         222 LightGoldenrod2_3
 51 Cyan1                 137 LightSalmon3          223 NavajoWhite1
 52 DarkRed               138 RosyBrown             224 MistyRose1
 53 DeepPink4             139 Grey63                225 Thistle1
 54 Purple4               140 MediumPurple2_2       226 Yellow1
 55 Purple4_2             141 MediumPurple1         227 LightGoldenrod1
 56 Purple3               142 Gold3                 228 Khaki1
 57 BlueViolet            143 DarkKhaki             229 Wheat1
 58 Orange4               144 NavajoWhite3          230 Cornsilk1
 59 Grey37                145 Grey69                231 Grey100
 60 MediumPurple4         146 LightSteelBlue3       232 Grey3
 61 SlateBlue3            147 LightSteelBlue        233 Grey7
 62 SlateBlue3_2          148 Yellow3               234 Grey11
 63 RoyalBlue1            149 DarkOliveGreen3_3     235 Grey15
 64 Chartreuse4           150 DarkSeaGreen3_2       236 Grey19
 65 DarkSeaGreen4         151 DarkSeaGreen2         237 Grey23
 66 PaleTurquoise4        152 LightCyan3            238 Grey27
 67 SteelBlue             153 LightSkyBlue1         239 Grey30
 68 SteelBlue3            154 GreenYellow           240 Grey35
 69 CornflowerBlue        155 DarkOliveGreen2       241 Grey39
 70 Chartreuse3           156 PaleGreen1_2          242 Grey42
 71 DarkSeaGreen4_2       157 DarkSeaGreen2_2       243 Grey46
 72 CadetBlue             158 DarkSeaGreen1         244 Grey50
 73 CadetBlue_2           159 PaleTurquoise1        245 Grey54
 74 SkyBlue3              160 Red3_2                246 Grey58
 75 SteelBlue1            161 DeepPink3             247 Grey62
 76 Chartreuse3_2         162 DeepPink3_2           248 Grey66
 77 PaleGreen3            163 Magenta3_2            249 Grey70
 78 SeaGreen3             164 Magenta3_3            250 Grey74
 79 Aquamarine3           165 Magenta2              251 Grey78
 80 MediumTurquoise       166 DarkOrange3_2         252 Grey82
 81 SteelBlue1_2          167 IndianRed_2           253 Grey85
 82 Chartreuse2           168 HotPink3_2            254 Grey89
 83 SeaGreen2             169 HotPink2              255 Grey93
 84 SeaGreen1             170 Orchid
 85 SeaGreen1_2           171 MediumOrchid1

There are two colors (foreground and background) and only one bold attribute.
Thus single bold attribute affects both colors when "reverse" attribute is used
in vifm run inside terminal emulator.  At the same time linux native console can
handle boldness of foreground and background colors independently, but for
consistency with terminal emulators this is available only implicitly by using
light versions of colors.  This behaviour might be changed in the future.

Although vifm supports 256 colors in a sense they are supported by UI drawing
library, whether you will be able to use all of them highly depends on your
terminal.  To set up terminal properly, make sure that $TERM in the
environment you run vifm is set to name of 256-color terminal (on *nixes it can
also be set via X resources), e.g. xterm-256color.  One can find list of
available terminal names by listing /usr/lib/terminfo/.  Number of colors
supported by terminal with current settings can be checked via "tput colors"
command.

Here is the hierarchy of highlight groups, which you need to know for using
transparency:
  JobLine
  SuggestBox
  StatusLine
    WildMenu
  Border
  CmdLine
    ErrorMsg
  Win
    File name specific highlights
      Directory
      Link
      BrokenLink
      Socket
      Device
      Fifo
      Executable
        Selected
          CurrLine
          OtherLine
  TopLine
    TopLineSel

"none" means default terminal color for highlight groups at the first level of
the hierarchy and transparency for all others.

Here file name specific highlights mean those configured via globs ({}) or
regular expressions (//).  At most one of them is applied per file entry, namely
the first that matches file name, hence order of :highlight commands might be
important in certain cases.
.TP
.BI "                                         :history"
.TP
.BI :his[tory]
creates a pop-up menu of directories visited.
.TP
.BI ":his[tory] x"
x can be:
.br
d[ir]     or . show directory history.
.br
c[md]     or : show command line history.
.br
s[earch]  or / show search history and search forward on l key.
.br
f[search] or / show search history and search forward on l key.
.br
b[search] or ? show search history and search backward on l key.
.br
i[nput]   or @ show prompt history (e.g. on one file renaming).
.br
fi[lter]  or = show filter history (see description of the "=" normal mode command).
.TP
.BI "                                         :if"
.TP
.BI ":if {expr1}"
starts conditional block.  Commands are executed until next matching :elseif,
:else or :endif command if {expr1} evaluates to non-zero, otherwise they are
ignored.  See also help on :else and :endif commands.

Example:
.EX

  if $TERM == 'screen.linux'
      highlight CurrLine ctermfg=lightwhite ctermbg=lightblack
  elseif $TERM == 'tmux'
      highlight CurrLine cterm=reverse ctermfg=black ctermbg=white
  else
      highlight CurrLine cterm=bold,reverse ctermfg=black ctermbg=white
  endif
.EE
.TP
.BI "                                         :invert"
.TP
.BI ":invert [f]"
invert file name filter.
.TP
.BI ":invert? [f]"
show current filter state.
.TP
.BI ":invert s"
invert selection.
.TP
.BI ":invert o"
invert sorting order of the primary sorting key.
.TP
.BI ":invert? o"
show sorting order of the primary sorting key.
.TP
.BI "                                         :jobs"
.TP
.BI :jobs
shows menu of current backgrounded processes.
.TP
.BI "                                         :let"
.TP
.BI ":let $ENV_VAR = <expr>"
sets environment variable.  Warning: setting environment variable to an empty
string on Windows removes it.
.TP
.BI ":let $ENV_VAR .= <expr>"
append value to environment variable.
.TP
.BI ":let &[l:|g:]opt = <expr>"
sets option value.
.TP
.BI ":let &[l:|g:]opt .= <expr>"
append value to string option.
.TP
.BI ":let &[l:|g:]opt += <expr>"
increasing option value, adding sub-values.
.TP
.BI ":let &[l:|g:]opt \-= <expr>"
decreasing option value, removing sub-values.
.TP
Where <expr> could be a single-quoted string, double-quoted string, an \
environment variable, function call or a concatanation of any of them in any \
order using the '.' operator.  Any whitespace is ignored.
.TP
.BI "                                         :locate"
.TP
.BI ":locate filename"
use "locate" command to create a menu of filenames.
Selecting a file from the menu will reload the current file list in vifm
to show the selected file.  By default the command relies on the external
"locate" utility (it's assumed that its database is already built), which can be
customized by altering value of the 'locateprg' option.
.TP
.BI :locate
repeats last :locate command.
.TP
.BI "                                         :ls"
.TP
.BI :ls
lists windows of active terminal multiplexer (only when terminal multiplexer is
used).  This is achieved by issuing proper command for active terminal
multiplexer, thus the list is not handled by vifm.
.TP
.BI "                                         :lstrash"
.TP
.BI :lstrash
displays a menu with list of files in trash.  Each element of the list is
original path of a deleted file, thus the list can contain duplicates.
.TP
.BI "                                         :mark"
.TP
.BI ":[range]ma[rk][?] x [/full/path] [filename]"
Set mark x (a\-zA\-Z0\-9) at /full/path and filename.  By default current
directory is being used.  If no filename was given and /full/path is current
directory then last file in [range] is used.  Using of macros is allowed.
Question mark will stop command from overwriting existing marks.
.TP
.BI "                                         :marks"
.TP
.BI :marks
create a pop-up menu of marks.
.TP
.BI ":marks list ..."
display the contents of the marks that are mentioned in list.
.TP
.BI "                                         :messages"
.TP
.BI ":mes[sages]"
shows previously given messages (up to 50).
.TP
.BI "                                         :mkdir"
.TP
.BI ":[line]mkdir[!] dir ..."
create directories at specified paths.  The [line] can be used to pick node in
a tree-view.  "!" means make parent directories as needed.  Macros are expanded.
.TP
.BI "                                         :move"
.TP
.BI ":[range]m[ove][!?][ &]"
move files to directory of other view.  With "?" prompts for destination
file names in an editor.  "!" forces overwrite.
.TP
.BI ":[range]m[ove][!] path[ &]"
move files to directory specified with the path (absolute or relative to
directory of other view).  "!" forces overwrite.
.TP
.BI ":[range]m[ove][!] name1 name2...[ &]"
move files to directory of other view giving each next file a
corresponding name from the argument list.  "!" forces overwrite.
.TP
.BI "                                         :nohlsearch"
.TP
.BI :noh[lsearch]
clear selection in current pane.
.TP
.BI "                                         :normal"
.TP
.BI ":norm[al][!] commands"
execute normal mode commands.  If "!" is used, user defined mappings are
ignored.  Unfinished last command is aborted as if <esc> or <c-c> was
typed.  A ":" should be completed as well.  Commands can't start with a
space, so put a count of 1 (one) before it.
.TP
.BI "                                         :only"
.TP
.BI :on[ly]
switch to a one window view.
.TP
.BI "                                         :popd"
.TP
.BI :popd
remove pane directories from stack.
.TP
.BI "                                         :pushd"
.TP
.BI ":pushd[!] /curr/dir [/other/dir]"
add pane directories to stack and process arguments like :cd command.
.TP
.BI :pushd
exchange the top two items of the directory stack.
.TP
.BI "                                         :put"
.TP
.BI ":[line]pu[t][!] [reg] [ &]"
puts files from specified register (" by default) into current directory.
The [line] can be used to pick node in a tree-view.  "!" moves files
"!" moves files from their original location instead of copying them.
During this operation no confirmation dialogs will be shown, all checks
are performed beforehand.
.TP
.BI "                                         :pwd"
.TP
.BI :pw[d]
show the present working directory.
.TP
.BI "                                         :quit"
.TP
.BI :q[uit][!]
exit vifm (add ! to skip saving changes and checking for active backgrounded
commands).
.TP
.BI "                                         :redraw"
.TP
.BI :redr[aw]
redraw the screen immediately.
.TP
.BI "                                         :registers"
.TP
.BI :reg[isters]
display menu with registers content.
.TP
.BI ":reg[isters] list ..."
display the contents of the numbered and named registers that are mentioned in
list (for example "az to display "", "a and "z content).
.TP
.BI "                                         :rename"
.TP
.BI :[range]rename[!]
rename files using vi to edit names. ! means go recursively through directories.
.TP
.BI ":[range]rename name1 name2..."
rename each of selected files to a corresponding name.
.TP
.BI "                                         :restart"
.TP
.BI :restart
free a lot of things (histories, commands, etc.), reread vifminfo and
vifmrc files and run startup commands passed in the argument list, thus
losing all unsaved changes (e.g. recent history or keys mapped in current
session).
.TP
.BI "                                         :restore"
.TP
.BI :[range]restore
restore file from trash directory, doesn't work outside one of trash
directories.  See "Trash directory" section below.
.TP
.BI "                                         :rlink"
.TP
.BI :[range]rlink[!?]
create relative symbolic links to files in directory of other view.  With
"?" prompts for destination file names in an editor. "!" forces overwrite.
.TP
.BI ":[range]rlink[!] path"
create relative symbolic links of files in directory specified with the
path (absolute or relative to directory of other view).  "!" forces
overwrite.
.TP
.BI ":[range]rlink[!] name1 name2..."
create relative symbolic links of files in directory of other view giving
each next link a corresponding name from the argument list.  "!" forces
overwrite.
.TP
.BI "                                         :screen"
.TP
.BI :screen
toggle whether to use the terminal multiplexer or not.
.br
A terminal multiplexer uses pseudo terminals to allow multiple windows to be
used in the console or in a single xterm.  Starting vifm from terminal
multiplexer with appropriate support turned on will cause vifm to open a new
terminal multiplexer window for each new file edited or program launched from
vifm.
.br
This requires screen version 3.9.9 or newer for the screen \-X argument or tmux
(1.8 version or newer is recommended).
.TP
.BI :screen!
enable integration with terminal multiplexers.
.TP
.BI :screen?
display whether integration with terminal multiplexers is enabled.
.LP
Note: the command is called screen for historical reasons (when tmux wasn't yet
supported) and might be changed in future releases, or get an alias.
.TP
.BI "                                         :select"
.TP
.BI ":[range]select"
select files in the given range (current file if no range is given).
.TP
.BI ":select {pattern}"
select files that match specified pattern.  Possible {pattern} forms are
described in "Patterns" section below.  Trailing slash for directories is taken
into account, so `:select! */ | invert s` selects only files.
.TP
.BI ":select //[iI]"
same as item above, but reuses last search pattern.
.TP
.BI ":select !{external command}"
select files from the list supplied by external command.  Files are matched by
full paths, relative paths are converted to absolute ones beforehand.
.TP
.BI ":[range]select! [{pattern}]"
same as above, but resets previously selected items before proceeding.
.TP
.BI "                                         :set"
.TP
.BI :se[t]
display all options that differ from their default value.
.TP
.BI ":se[t] all"
display all options.
.TP
.BI ":se[t] opt1=val1 opt2='val2' opt3=""val3"" ..."
sets given options.  For local options both values are set.
.br
You can use following syntax:
 \- for all options \- option, option? and option&
 \- for boolean options \- nooption, invoption and option!
 \- for integer options \- option=x, option+=x and option\-=x
 \- for string options \- option=x and option+=x
 \- for string list options \- option=x, option+=x and option\-=x
 \- for enumeration options \- option=x, option+=x and option\-=x
 \- for set options \- option=x, option+=x and option\-=x
 \- for charset options \- option=x, option+=x, option\-=x and option^=x

the meaning:
 \- option \- turn option on (for boolean) or print its value (for all others)
 \- nooption \- turn option off
 \- invoption \- invert option state
 \- option! \- invert option state
 \- option? \- print option value
 \- option& \- reset option to its default value
 \- option=x or option:x \- set option to x
 \- option+=x \- add/append x to option
 \- option\-=x \- remove (or subtract) x from option
 \- option^=x \- toggle x presence among values of the option

Option name can be prepended and appended by any number of whitespace
characters.
.TP
.BI "                                         :setglobal"
.TP
.BI :setg[lobal]
display all global options that differ from their default value.
.TP
.BI ":setg[lobal] all"
display all global options.
.TP
.BI ":setg[lobal] opt1=val1 opt2='val2' opt3=""val3"" ..."
same as :set, but changes/prints only global options or global values of local
options.  Changes to the latter might be not visible until directory is changed.
.TP
.BI "                                         :setlocal"
.TP
.BI :setl[ocal]
display all local options that differ from their default value.
.TP
.BI ":setl[ocal] all"
display all local options.
.TP
.BI ":setl[ocal] opt1=val1 opt2='val2' opt3=""val3"" ..."
same as :set, but changes/prints only local values of local options.
.TP
.BI "                                         :shell"
.TP
.BI :sh[ell][!]
start a shell in current directory.  "!" suppresses spawning dedicated
window of terminal multiplexer for a shell.  To make vifm adaptive to
environment it uses $SHELL if it's defined, otherwise 'shell' value is used.

.TP
.BI "                                         :siblnext"
.TP
.BI :siblnext[!]

change directory to next sibling directory of current path using value of
global sort option of current pane.  "!" enables wrapping.

For example, say, you're at /boot and root listing starts like this:

    bin/
    boot/
    dev/
    ...

Issuing :siblnext will navigate to /dev.

.TP
.BI "                                         :siblprev"
.TP
.BI :siblprev[!]
same as :siblnext, but in the opposite direction.
.TP
.BI "                                         :sort"
.TP
.BI :sor[t]
display dialog with different sorting methods, when one can select primary
sorting key.  When 'viewcolumns' options is empty and 'lsview' is off, changing
primary sorting key will also affect view look (in particular the second column
of the view will be changed).
.TP
.BI "                                         :source"
.TP
.BI ":so[urce] file"
read command-line commands from the file.
.TP
.BI "                                         :split"
.TP
.BI :sp[lit]
switch to a two window horizontal view.
.TP
.BI :sp[lit]!
toggle horizontal window splitting.
.TP
.BI ":sp[lit] path"
splits the window horizontally to show both file directories.  Also changes
other pane to path (absolute or relative to current directory of active pane).
.TP
.BI "                                         :substitute"
.TP
.BI :[range]s[ubstitute]/pattern/string/[flags]
for each file in range replace a match of pattern with string.
.LP
String can contain \\0...\\9 to link to capture groups (\\0 \- all match, \\1 \-
first group, etc.).

Pattern is stored in search history.

Available flags:
.RS 2
.IP \- 2
i \- ignore case (the 'ignorecase' and 'smartcase' options are not used)
.IP \- 2
I \- don't ignore case (the 'ignorecase' and 'smartcase' options are not used)
.IP \- 2
g \- substitute all matches in each file name (each g toggles this)
.RE
.TP
.BI :[range]s[ubstitute]/pattern
substitute pattern with an empty string.
.TP
.BI :[range]s[ubstitute]//string/[flags]
use last pattern from search history.
.TP
.BI :[range]s[ubstitute]
repeat previous substitution command.
.TP
.BI "                                         :sync"
.TP
.BI ":sync [relative path]"
change the other pane to the current pane directory or to some path relative
to the current directory.  Using macros is allowed.
.TP
.BI ":sync!"
change the other pane to the current pane directory and synchronize cursor
position.  If current pane displays custom list of files, position before
entering it is used (current one might not make any sense).

.TP
.BI ":sync! [location | cursorpos | localopts | filters | filelist | tree | all]..."
change enumerated properties of the other pane to match corresponding properties
of the current pane.  Arguments have the following meanings:
.RS
.RS 2
.IP \- 2
location \- current directory of the pane;
.IP \- 2
cursorpos \- cursor position (doesn't make sense without "location");
.IP \- 2
localopts \- all local options;
.IP \- 2
filters \- all filters;
.IP \- 2
filelist \- list of files for custom view (implies "location");
.IP \- 2
tree \- tree structure for tree view (implies "location");
.IP \- 2
all \- all of the above.
.RE
.RE
.TP
.BI "                                         :touch"
.TP
.BI ":[line]touch file..."
create files at specified paths.  Aborts on errors.  Doesn't update time of existing
files.  The [line] can be used to pick node in a tree-view.  Macros are
expanded.
.TP
.BI "                                         :tr"
.TP
.BI :[range]tr/pattern/string/
for each file in range transliterate the characters which appear in pattern to
the corresponding character in string.  When string is shorter than pattern,
it's padded with its last character.
.TP
.BI "                                         :trashes"
.TP
.BI :trashes
lists all valid trash directories in a menu.  Only non-empty and writable trash
directories are shown.  This is exactly the list of directories that are cleared
when :empty command is executed.
.TP
.BI :trashes?
same as :trashes, but also displays size of each trash directory.
.TP
.BI "                                         :tree"
.TP
.BI :tree
turn pane into tree view with current directory as a root.  The tree view is
implemented on top of a custom view, but is automatically kept in sync with
file system state and considers all the filters.  Thus the structure corresponds
to what one would see on visiting the directories manually.  Tree structure is
incompatible with ls-like view, so value of 'lsview' option is ignored.
.TP
.BI "                                         :undolist"
.TP
.BI :undol[ist]
display list of latest changes.  Use "!" to see actual commands.
.TP
.BI "                                         :unlet"
.TP
.BI ":unl[et][!] $ENV_VAR1 $ENV_VAR2 ..."
remove environment variables. Add ! to omit displaying of warnings about
nonexistent variables.
.TP
.BI "                                         :unselect"
.TP
.BI ":[range]unselect"
unselect files in the given range (current file if no range is given).
.TP
.BI ":unselect {pattern}"
unselect files that match specified pattern.  Possible {pattern} forms are
described in "Patterns" section below.  Trailing slash for directories is taken
into account, so `:unselect */` unselects directories.
.TP
.BI ":unselect !{external command}"
unselect files from the list supplied by external command.  Files are matched by
full paths, relative paths are converted to absolute ones beforehand.
.TP
.BI ":unselect //[iI]"
same as item above, but reuses last search pattern.
.TP
.BI "                                         :version"
.TP
.BI :ve[rsion]
show menu with version information.
.TP
.BI "                                         :vifm"
.TP
.BI :vifm
same as :version.
.TP
.BI "                                         :view"
.TP
.BI :vie[w]
toggle on and off the quick file view.
.TP
.BI :vie[w]!
turn on quick file view if it's off.
.TP
.BI "                                         :volumes"
.TP
.BI :volumes
only for MS-Windows
.br
display menu with volume list.  Hitting l (or Enter) key opens appropriate
volume in the current pane.
.TP
.BI "                                         :vsplit"
.TP
.BI :vs[plit]
switch to a two window vertical view.
.TP
.BI :vs[plit]!
toggle window vertical splitting.
.TP
.BI ":vs[plit] path"
split the window vertically to show both file directories.  And changes other
pane to path (absolute or relative to current directory of active pane).
.TP
.BI "                                         :wincmd"
.TP
.BI ":[count]winc[md] {arg}"
same as running Ctrl-W [count] {arg}.
.TP
.BI "                                         :windo"
.TP
.BI ":windo [command...]"
execute command for each pane (same as :winrun % command).
.TP
.BI "                                         :winrun"
.TP
.BI ":winrun type [command...]"
execute command for pane(s), which is determined by type argument:
  \- ^ \- top-left pane
  \- $ \- bottom-right pane
  \- % \- all panes
  \- . \- current pane
  \- , \- other pane
.TP
.BI "                                         :write"
.TP
.BI :w[rite]
write vifminfo file.
.TP
.BI "                                         :wq"
.TP
.BI :wq[!]
same as :quit, but ! only disables check of backgrounded commands.
.TP
.BI "                                         :xit"
.TP
.BI ":x[it][!]"
will exit Vifm (add ! if you don't want to save changes).
.TP
.BI "                                         :yank"
.TP
.BI ":[range]y[ank] [reg] [count]"
will yank files to the reg register.
.TP
.BI "                                         :map lhs rhs"
.TP
.BI ":map lhs rhs"
map lhs key sequence to rhs in normal and visual modes.
.TP
.BI ":map! lhs rhs"
map lhs key sequence to rhs in command line mode.

.TP
.BI "                                       :cmap :dmap :mmap :nmap :qmap :vmap"
.TP
.BI ":cm[ap] lhs rhs"
map lhs to rhs in command line mode.
.TP
.BI ":dm[ap] lhs rhs"
map lhs to rhs in dialog modes.
.TP
.BI ":mm[ap] lhs rhs"
map lhs to rhs in menu mode.
.TP
.BI ":nm[ap] lhs rhs"
map lhs to rhs in normal mode.
.TP
.BI ":qm[ap] lhs rhs"
map lhs to rhs in view mode.
.TP
.BI ":vm[ap] lhs rhs"
map lhs to rhs in visual mode.

.TP
.BI "                                         :*map"
.TP
.BI :cm[ap]
list all maps in command line mode.
.TP
.BI :dm[ap]
list all maps in dialog modes.
.TP
.BI :mm[ap]
list all maps in menu mode.
.TP
.BI :nm[ap]
list all maps in normal mode.
.TP
.BI :qm[ap]
list all maps in view mode.
.TP
.BI :vm[ap]
list all maps in visual mode.
.TP
.BI "                                         :*map beginning"
.TP
.BI ":cm[ap] beginning"
list all maps in command line mode that start with the beginning.
.TP
.BI ":dm[ap] beginning"
list all maps in dialog modes that start with the beginning.
.TP
.BI ":mm[ap] beginning"
list all maps in menu mode that start with the beginning.
.TP
.BI ":nm[ap] beginning"
list all maps in normal mode that start with the beginning.
.TP
.BI ":qm[ap] beginning"
list all maps in view mode that start with the beginning.
.TP
.BI ":vm[ap] beginning"
list all maps in visual mode that start with the beginning.
.TP
.BI "                                         :noremap"
.TP
.BI ":no[remap] lhs rhs"
map the key sequence lhs to rhs for normal and visual modes, but disallow
mapping of rhs.
.TP
.BI ":no[remap]! lhs rhs"
map the key sequence lhs to rhs for command line mode, but disallow mapping of
rhs.
.TP
.BI "               :cnoremap :dnoremap :mnoremap :nnoremap :qnoremap :vnoremap"
.TP
.BI ":cno[remap] lhs rhs"
map the key sequence lhs to rhs for command line mode, but disallow mapping of
rhs.
.TP
.BI ":dn[oremap] lhs rhs"
map the key sequence lhs to rhs for dialog modes, but disallow mapping of rhs.
.TP
.BI ":mn[oremap] lhs rhs"
map the key sequence lhs to rhs for menu mode, but disallow mapping of rhs.
.TP
.BI ":nn[oremap] lhs rhs"
map the key sequence lhs to rhs for normal mode, but disallow mapping of rhs.
.TP
.BI ":qn[oremap] lhs rhs"
map the key sequence lhs to rhs for view mode, but disallow mapping of rhs.
.TP
.BI ":vn[oremap] lhs rhs"
map the key sequence lhs to rhs for visual mode, but disallow mapping of rhs.
.TP
.BI "                                         :unmap"
.TP
.BI ":unm[ap] lhs"
remove the mapping of lhs from normal and visual modes.
.TP
.BI ":unm[ap]! lhs"
remove the mapping of lhs from command line mode.
.TP
.BI "                           :cunmap :dunmap :munmap :nunmap :qunmap :vunmap"
.TP
.BI ":cu[nmap] lhs"
remove the mapping of lhs from command line mode.
.TP
.BI ":du[nmap] lhs"
remove the mapping of lhs from dialog modes.
.TP
.BI ":mu[nmap] lhs"
remove the mapping of lhs from menu mode.
.TP
.BI ":nun[map] lhs"
remove the mapping of lhs from normal mode.
.TP
.BI ":qun[map] lhs"
remove the mapping of lhs from view mode.
.TP
.BI ":vu[nmap] lhs"
remove the mapping of lhs from visual mode.
.\" ---------------------------------------------------------------------------
.SH Ranges
.\" ---------------------------------------------------------------------------
The ranges implemented include:
  2,3 \- from second to third file in the list (including it)
  % \- the entire directory.
  . \- the current position in the filelist.
  $ \- the end of the filelist.
  't \- the mark position t.

Examples:
.EX

  :%delete

.EE
would delete all files in the directory.
.EX

  :2,4delete

.EE
would delete the files in the list positions 2 through 4.
.EX

  :.,$delete

.EE
would delete the files from the current position to the end of the filelist.
.EX

  :3delete4

.EE
would delete the files in the list positions 3, 4, 5, 6.

If a backward range is given :4,2delete \- an query message is given and
user can chose what to do next.

The builtin commands that accept a range are :d[elete] and :y[ank].
.\" ---------------------------------------------------------------------------
.SH Command macros
.\" ---------------------------------------------------------------------------
The command macros may be used in user commands.
.TP
.BI %a
User arguments.  When user arguments contain macros, they are expanded before
preforming substitution of %a.
.TP
.BI "%c %""c"
The current file under the cursor.
.TP
.BI "%C %""C"
The current file under the cursor in the other directory.
.TP
.BI "%f %""f"
All of the selected files.
.TP
.BI "%F %""F"
All of the selected files in the other directory list.
.TP
.BI "%b %""b"
Same as %f %F.
.TP
.BI "%d %""d"
Full path to current directory.
.TP
.BI "%D %""D"
Full path to other file list directory.
.TP
.BI "%rx %""rx"
Full paths to files in the register {x}.
In case of invalid symbol in place of {x}, it's processed with the rest of the
line and default register is used.
.TP
.BI %m
Show command output in a menu.
.TP
.BI %M
Same as %m, but l (or Enter) key is handled like for :locate and :find commands.
.TP
.BI %u
Process command output as list of paths and compose custom view out of it.
.TP
.BI %U
Same as %u, but implies less list updates inside vifm, which is absence of
sorting at the moment.
.TP
.BI %Iu
same as %u, but gives up terminal before running external command.
.TP
.BI %IU
same as %U, but gives up terminal before running external command.
.TP
.BI %S
Show command output in the status bar.
.TP
.BI %q
redirect command output to quick view, which is activated if disabled.
.TP
.BI %s
Execute command in split window of active terminal multiplexer (ignored if not
running inside one).
.TP
.BI %n
Forbid using of terminal multiplexer to run the command.
.TP
.BI %i
Completely ignore command output.

.TP
.BI %pc
Marks end of the main command and beginning of the clear command, which is
invoked on closing preview of a file.
.LP
The following dimensions and coordinates are in characters:
.TP
.BI %px
x coordinate of top-left corner of preview area.
.TP
.BI %py
y coordinate of top-left corner of preview area.
.TP
.BI %pw
width of preview area.
.TP
.BI %ph
height of preview area.

.LP
Use %% if you need to put a percent sign in your command.

Note that %m, %M, %s, %S, %i, %u and %U macros are mutually exclusive.  Only
the last one of them on the command will take effect.

You can use file name modifiers after %c, %C, %f, %F, %b, %d and %D macros.
Supported modifiers are:
.RS 2
.IP \- 2
:p           \- full path
.IP \- 2
:u           \- UNC name of path (e.g. "\\\\server" in "\\\\server\\share"), Windows only.  Expands to current computer name for not UNC paths.
.IP \- 2
:~           \- relative to the home directory
.IP \- 2
:.           \- relative to current directory
.IP \- 2
:h           \- head of the file name
.IP \- 2
:t           \- tail of the file name
.IP \- 2
:r           \- root of the file name (without last extension)
.IP \- 2
:e           \- extension of the file name (last one)
.IP \- 2
:s?pat?sub?  \- substitute the first occurrence of pat with sub.  You can use any character for '?', but it must not occur in pat or sub.
.IP \- 2
:gs?pat?sub? \- like :s, but substitutes all occurrences of pat with sub.
.RE

See ':h filename\-modifiers' in Vim's documentation for the detailed
description.

Using %x means expand corresponding macro escaping all characters that have
special meaning.  And %"x means using of double quotes and escape only backslash
and double quote characters, which is more useful on Windows systems.

Position and quantity (if there is any) of %m, %M, %S or %s macros in the
command is unimportant.  All their occurrences are removed from the resulting
command.

%c and %f macros are expanded to file names only, when %C and %F are expanded
to full paths.  %f and %F follow this in %b too.
.TP
.BI ":com move mv %f %D"
set the :move command to move all of the files selected in the current directory
to the other directory.
.TP
The %a macro is replaced with any arguments given to an alias command.  All \
arguments are considered optional.
:com lsl !!ls \-l %a \- set the lsl command to execute ls \-l with or without an
argument.
.TP
.BI ":lsl<Enter>"
will list the directory contents of the current directory.
.TP
.BI ":lsl filename<Enter>"
will list only the given filename.
.TP
The macros can also be used in directly executing commands.  ":!mv %f %D" \
would move the current directory selected files to the other directory.
.TP
Appending & to the end of a command causes it to be executed in the \
background.  Typically you want to run two kinds of external commands in the \
background:
.RS 2
.IP \- 2
GUI applications that doesn't fork thus block vifm (:!sxiv %f &);
.IP \- 2
console tools that do not work with terminal (:!mv %f %D &).
.RE
.TP
You don't want to run terminal commands, which require terminal input or \
output something in background because they will mess up vifm's TUI.  Anyway, \
if you did run such a command, you can use Ctrl-L key to update vifm's TUI.
.TP
Rewriting the example command with macros given above with backgrounding:
.EX
.EE
.LP
%m, %M, %s, %S, %u and %U macros cannot be combined with background mark (" &")
as it doesn't make much sense.
.\" ---------------------------------------------------------------------------
.SH Command backgrounding
.\" ---------------------------------------------------------------------------
Copy and move operation can take a lot of time to proceed.  That's why vifm
supports backgrounding of this two operations.  To run :copy, :move or :delete
command in the background just add " &" at the end of a command.

For each background operation a new thread is created.  Currently job cannot be
stopped or paused.

You can see if command is still running in the :jobs menu.  Backgrounded
commands have progress instead of process id at the line beginning.

Background operations cannot be undone.
.\" ---------------------------------------------------------------------------
.SH Cancellation
.\" ---------------------------------------------------------------------------
Note that cancellation works somewhat different on Windows platform due to
different mechanism of break signal propagation.  One also might need to use
Ctrl-Break shortcut instead of Ctrl-C.

There are two types of operations that can be cancelled:
.RS 2
.IP \- 2
file system operations;
.IP \- 2
mounting with FUSE (but not unmounting as it can cause loss of data);
.IP \- 2
calls of external applications.
.RE

Note that vifm never terminates applications, it sends SIGINT signal and lets
the application quit normally.

When one of set of operations is cancelled (e.g. copying of 5th file of 10
files), further operations are cancelled too.  In this case undo history will
contain only actually performed operations.

Cancelled operations are indicated by "(cancelled)" suffix appended to
information message on statusbar.

.B File system operations

Currently the following commands can be cancelled: :alink, :chmod, :chown,
:clone, :copy, :delete, :mkdir, :move, :restore, :rlink, :touch.  File
putting (on p/P key) can be cancelled as well.  It's not hard to see that these
are mainly long-running operations.

Cancelling commands when they are repeated for undo/redo operations is allowed
for convenience, but is not recommended as further undo/redo operations might
get blocked by side-effects of partially cancelled group of operations.

These commands can't be cancelled: :empty, :rename, :substitute, :tr.

.B Mounting with FUSE

It's not considered to be an error, so only notification on the status bar is
shown.

.B External application calls

Each of this operations can be cancelled: :apropos, :find, :grep, :locate.
.\" ---------------------------------------------------------------------------
.SH Patterns
.\" ---------------------------------------------------------------------------
:highlight, :filetype, :filextype, :fileviewer commands and 'classify' option
support globs, regular expressions and mime types to match file names or their
paths.

There are six possible ways to write a single pattern:
.RS 2
.IP 1. 3
[!]{comma-separated-name-globs}
.IP 2. 3
[!]{{comma-separated-path-globs}}
.IP 3. 3
[!]/name-regular-expression/[iI]
.IP 4. 3
[!]//path-regular-expression//[iI]
.IP 5. 3
[!]<comma-separated-mime-type-globs>
.IP 6. 3
undecorated-pattern
.RE

To combine several patterns (AND them), make sure you're using of the first
five forms and write patterns one after another, like this:
.EX
  <text/plain>{*.vifm}
.EE
Mind that if you make a mistake the whole string will be treated as the sixth
form.

:filetype, :filextype and :fileviewer commands accept comma-separated list of
patterns instead of a single pattern, thus effectively handling OR operation on
them:
.EX
  <text/plain>{*.vifm},<application/pdf>{*.pdf}
.EE

Five first forms can include leading exclamation mark that negates pattern
matching.

The last form is implicitly refers to one of others.  :highlight does not accept
undecorated form, while :filetype, :filextype, :fileviewer and 'classify' treat
it as list of name globs.

Regular expression patterns are case insensitive by default.

"Globs" section below provides short overview of globs and some important points
that one needs to know about them.

Mime type matching is essentially globs matching applied to mime type of a file
instead of its name/path.  Note: mime types aren't detected on Windows.
.\" ---------------------------------------------------------------------------
.SH Globs
.\" ---------------------------------------------------------------------------
Globs are always case insensitive as it makes sense in general case.

*, ?, [ and ] are treated as special symbols in the pattern.  E.g.
.EX

  :filetype * less %c

.EE
matches all files.  One can use character classes for escaping, so
.EX

  :filetype [*] less %c

.EE
matches only one file name, the one which contains only asterisk symbol.

* means any number of any characters (possibly an empty substring), with one
exception: asterisk at the pattern beginning doesn't match dot in the first
position.  E.g.
.EX

  :fileviewer *.zip,*.jar zip \-sf %c

.EE
associates using of zip program to preview all files with zip or jar
extensions as listing of their content.

? means any character at this position.  E.g.
.EX

  :fileviewer ?.out file %c

.EE
calls file tool for all files which has exactly one character before their
extension (e.g. a.out, b.out).

Square brackets designate character class, which means that whole character
class matches against any of characters listed in it.  For example
.EX

  :fileviewer *.[ch] highlight \-O xterm256 \-s dante \-\-syntax c %c

.EE
makes vifm call highlight program to colorize source and header files in C
language for a 256-color terminal.  Equal command would be
.EX

  :fileviewer *.c,*.h highlight \-O xterm256 \-s dante \-\-syntax c %c

.EE

Inside square brackets ^ or ! can be used for symbol class negotiation and
the \- symbol to set a range. ^ and ! should appear right after the opening
square bracket.  For example
.EX

  :filetype *.[!d]/ inspect_dir

.EE
associates inspect_dir as additional handler for all directories that have one
character extension unless it's "d" letter.  And
.EX

  :filetype [0-9].jpg sxiv

.EE
associates sxiv picture viewer only for JPEG-files that contain single digit
in their name.
.\" ---------------------------------------------------------------------------
.SH :set options
.\" ---------------------------------------------------------------------------
.TP
.BI "Local options"
These are kind of options that are local to a specific view.  So you can set
ascending sorting order for left pane and descending order for right pane.

In addition to being local to views, each such option also has two values:
.RS
.RS 2
.IP \- 2
local to current directory (value associated with current location);
.IP \- 2
global to current directory (value associated with the pane).
.RE
.RE

.RS
The idea is that current directory can be made a temporary exception to regular
configuration of the view, until directory change.  Use :setlocal for that.
:setglobal changes view value not affecting settings until directory change.
:set applies changes immediately to all values.
.RE

.TP
.BI 'aproposprg'
type: string
.br
default: "apropos %a"
.br
Specifies format for an external command to be invoked by the :apropos command.
The format supports expanding of macros, specific for a particular *prg option,
and %% sequence for inserting percent sign literally.  This option should
include the %a macro to specify placement of arguments passed to the :apropos
command.  If the macro is not used, it will be implicitly added after a space to
the value of this option.
.TP
.BI 'autochpos'
type: boolean
.br
default: true
.br
When disabled vifm will set cursor to the first line in the view after :cd and
:pushd commands instead of saved cursor position.  Disabling this will also
make vifm clear information about cursor position in the view history on :cd
and :pushd commands (and on startup if 'autochpos' is disabled in the vifmrc).
l key in the ":history ." and ":trashes" menus is treated like :cd command.
This option also affects marks so that navigating to a mark doesn't restore
cursor position.
.TP
.BI "'columns' 'co'"
type: integer
.br
default: terminal width on startup
.br
Terminal width in characters.
.TP
.BI "'caseoptions'"
type: charset
.br
default: ""
.br
This option gives additional control over case sensitivity by allowing
overriding default behaviour to either always be case sensitive or
always be case insensitive.  Possible values form pairs of lower and
upper case letters that configure specific aspect of behaviour:
  p - always ignore case of paths during completion.
  P - always match case of paths during completion.
  g - always ignore case of characters for f/F/;/,.
  G - always match case of characters for f/F/;/,.

At most one item of each pair takes affect, if both or more are present, only
the last one matters.  When none of pair's elements are present, the behaviour
is default (depends on operating system for path completion and on values of
\'ignorecase' and 'smartcase' options for file navigation).
.TP
.BI "'cdpath' 'cd'"
type: string list
.br
default: value of $CDPATH with commas instead of colons
.br
Specifies locations to check on changing directory with relative path that
doesn't start with "./" or "../".  When non-empty, current directory is
examined after directories listed in the option.

This option doesn't affect completion of :cd command.

Example:
.EX

  set cdpath=~

.EE
This way ":cd bin" will switch to "~/bin" even if directory named "bin" exists
in current directory, while ":cd ./bin" command will ignore value of 'cdpath'.
.TP
.BI 'chaselinks'
type: boolean
.br
default: false
.br
When enabled path of view is always resolved to real path (with all symbolic
links expanded).
.TP
.BI 'classify'
type: string list
.br
default: ":dir:/"
.br
Specifies file name prefixes and suffixes depending on file type or name.
The format is either of:
  - [{prefix}]:{filetype}:[{suffix}]
  - [{prefix}]::{pattern}::[{suffix}]
.br
Possible {pattern} forms are described in "Patterns" section above.

Priority rules:
  - file name patterns have priority over type patterns
  - file name patterns are matched in left-to-right order of their appearance \
in this option

Either {prefix} or {suffix} or both can be omitted (which is the default for
all unspecified file types), this means empty {prefix} and/or {suffix}.
{prefix} and {suffix} should consist of at most eight characters.  Elements
are separated by commas.  Neither prefixes nor suffixes are part of file names,
so they don't affect commands which operate on file names in any way.  Comma
(',') character can be inserted by doubling it.  List of file type names can be
found in the description of filetype() function.
.TP
.BI "'confirm' 'cf'"
type: set
.br
default: delete,permdelete
.br
Defines which operations require confirmation:
.br
 \- delete     \- moving files to trash (on d or :delete);
.br
 \- permdelete \- permanent deletion of files (on D or :delete! command or on
undo/redo operation).
.TP
.BI "'cpoptions' 'cpo'"
type: charset
.br
default: "fst"
.br
Contains a sequence of single-character flags.  Each flag enables behaviour of
older versions of vifm.  Flags:
.br
 \- f \- when included, running :filter command results in not inverted
(matching files are filtered out) and :filter! in inverted (matching files are
left) filter, when omitted, meaning of the exclamation mark changes to the
opposite;
.br
 \- s \- when included, yy, dd and DD normal mode commands act on selection, \
otherwise they operate on current file only;
.br
 \- t \- when included, <tab> (thus <c-i>) behave as <space> and switch active \
pane, otherwise <tab> and <c-i> go forward in the view history.
.TP
.BI 'cvoptions'
type: set
.br
default:
.br
Specifies whether entering/leaving custom views triggers events that normally
happen on entering/leaving directories:
 \- autocmds    \- trigger autocommands on entering/leaving custom views;
 \- localopts   \- reset local options on entering/leaving custom views;
 \- localfilter \- reset local filter on entering/leaving custom views.
.TP
.BI 'deleteprg'
type: string
.br
default: ""
.br
Specifies program to run on files that are permanently removed.  When empty,
files are removed as usual, otherwise this command is invoked on each file by
appending its name.  If the command doesn't remove files, they will remain on
the file system.
.TP
.BI 'dirsize'
type: enumeration
.br
default: size
.br
Controls how size of directories is displayed in file views.  The following
values are possible:
 \- size   \- size of directory (i.e., size used to store list of files)
 \- nitems \- number of entries in the directory (excluding . and ..)

Size obtained via ga/gA overwrites this setting so seeing count of files and
occasionally size of directories is possible.
.TP
.BI 'dotdirs'
type: set
.br
default: nonrootparent
.br
Controls displaying of dot directories.  The following values are possible:
 \- rootparent    \- show "../" in root directory of file system
 \- nonrootparent \- show "../" in non-root directories of file system

Note that empty directories always contain "../" entry regardless of value of
this option.  "../" disappears at the moment at least one file is created.
.TP
.BI 'dotfiles'
type: boolean
.br
default: false
.br
Whether dot files are shown in the view.  Can be controlled with z* bindings.
.TP
.BI 'fastrun'
type: boolean
.br
default: false
.br
With this option turned on you can run partially entered commands with
unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).
.TP
.BI "'fillchars' 'fcs'"
type: string list
.br
default: ""
.br
Sets characters used to fill borders.

  item         default    used for
  vborder:c    ' '        left, middle and right vertical borders

If value is omitted, its default value is used.  Example:
.EX

  set fillchars=vborder:.
.EE
.TP
.BI 'findprg'
type: string
.br
default: "find %s %a \-print , \-type d \\( ! \-readable \-o ! \-executable \\) \-prune"
.br
Specifies format for an external command to be invoked by the :find
command.  The format supports expanding of macros, specific for a particular
*prg option, and %% sequence for inserting percent sign literally.  This
option should include the %s macro to specify placement of list of paths to
search in and %a or %A macro to specify placement of arguments passed to the
:find command.  If some of the macros are not used, they will be
implicitly added after a space to the value of the option in the following
order: %s, %a.  Note that when neither %a nor %A are specified, it's %a which
is added implicitly.

The macros can slightly change their meaning depending on :find command
arguments.  When the first argument points to an existing directory, %s is
assigned all arguments and %a/%A are left empty.  Otherwise, %s is assigned
a dot (".") meaning current directory or list of selected file names, if any.
%a/%A are assigned arguments when first argument starts with a dash ("\-"),
otherwise %a gets an escaped version of arguments, prepended by "\-name"
(on *nix) or "\-iname" (on Windows) predicate.

%a and %A macros contain almost the same value, the difference is that %a can
be escaped and %A is never escaped.  %A is to be used mainly on Windows, where
shell escaping is a mess and can break command execution.

Optional %u or %U macro could be used (if both specified %U is chosen) to force
redirection to custom or unsorted custom view respectively.

Starting from Windows Server 2003 a where command is available, one can
configure vifm to use it in the following way:
.EX

  set findprg="where /R %s %A"

.EE
As the syntax of this command is rather limited, one can't use :find
command with selection of more than one item in this case.  The command looks
for files only completely ignoring directories.

When using find port on Windows, another option is to setup 'findprg' like
this:
.EX

  set findprg="find %s %a"
.EE
.TP
.BI 'followlinks'
type: boolean
.br
default: true
.br
Follow links on l or Enter.  That is navigate to destination file instead of
treating the link as if it were target file.  Doesn't affects links to
directories, which are always entered (use gf key for directories).
.TP
.BI 'fusehome'
type: string
.br
default: "($XDG_DATA_HOME/.local/share | $VIFM)/fuse/"
.br
Directory to be used as a root dir for FUSE mounts.  Value of the option can
contain environment variables (in form "$envname"), which will be expanded
(prepend it with a slash to prevent expansion).  The value should expand to an
absolute path.

If you change this option, vifm won't remount anything.  It affects future
mounts only.  See "Automatic FUSE mounts" section below for more information.
.TP
.BI "'gdefault' 'gd'"
type: boolean
.br
default: false
.br
When on, 'g' flag is on for :substitute by default.
.TP
.BI 'grepprg'
type: string
.br
default: "grep \-n \-H \-I \-r %i %a %s"
.br
Specifies format for an external command to be invoked by the :grep command.
The format supports expanding of macros, specific for a particular *prg option,
and %% sequence for inserting percent sign literally.  This option should
include the %i macro to specify placement of "\-v" string when inversion of
results is requested, %a or %A macro to specify placement of arguments passed to
the :grep command and the %s macro to specify placement of list of files to
search in.  If some of the macros are not used, they will be implicitly added
after a space to the value of the 'grepprg' option in the following order: %i,
%a, %s.  Note that when neither %a nor %A are specified, it's %a which is added
implicitly.

Optional %u or %U macro could be used (if both specified %U is chosen) to force
redirection to custom or unsorted custom view respectively.

See 'findprg' option for description of difference between %a and %A.

Example of setup to use ack (http://beyondgrep.com/) instead of grep:
.EX

  set grepprg=ack\\ \-H\\ \-r\\ %i\\ %a\\ %s

.EE
or The Silver Searcher (https://github.com/ggreer/the_silver_searcher):
.EX

  set grepprg=ag\\ \-\-line-numbers\\ %i\\ %a\\ %s

.EE

.TP
.BI "'history' 'hi'"
type: integer
.br
default: 15
.br
Maximum number of stored items in all histories.
.TP
.BI "'hlsearch' 'hls'"
type: boolean
.br
default: true
.br
Highlight all matches of search pattern.
.TP
.BI 'iec'
type: boolean
.br
default: false
.br
Use KiB, MiB, ... suffixes instead of K, M, ... when printing size in
human-friendly format.
.TP
.BI "'ignorecase' 'ic'"
type: boolean
.br
default: false
.br
Ignore case in search patterns (:substitute, / and ? commands) and characters
after f and F commands.  It doesn't affect file filtering.
.TP
.BI "'incsearch' 'is'"
type: boolean
.br
default: false
.br
When this option is set, search and view update for local filter is be
performed starting from initial cursor position each time search pattern is
changed.
.TP
.BI 'iooptions'
type: set
.br
default:
.br
Controls details of file operations.  The following values are available:
 \- fastfilecloning \- perform fast file cloning (copy-on-write), when available
                     (available on Linux and btrfs file system).
.TP
.BI "'laststatus' 'ls'"
type: boolean
.br
default: true
.br
Controls if status bar is visible.
.TP
.BI 'lines'
type: integer
.br
default: terminal height on startup
.br
Terminal height in lines.
.TP
.BI 'locateprg'
type: string
.br
default: "locate %a"
.br
Specifies format for an external command to be invoked by the :locate command.
The format supports expanding of macros, specific for a particular *prg option,
and %% sequence for inserting percent sign literally.  This option should
include the %a macro to specify placement of arguments passed to the :locate
command.  If the macro is not used, it will be implicitly added after a space to
the value of this option.

Optional %u or %U macro could be used (if both specified %U is chosen) to force
redirection to custom or unsorted custom view respectively.
.TP
.BI 'mintimeoutlen'
type: integer
.br
default: 150
.br
The fracture of 'timeoutlen' in milliseconds that is waited between subsequent
input polls, which affects various asynchronous operations (detecting changes
made by external applications, monitoring background jobs, redrawing UI).  There
are no strict guarantees, however the higher this value is, the less is CPU load
in idle mode.
.TP
.BI 'lsview'
type: boolean
.br
default: false
.br
scope: local
.br
When this option is set, directory view will be displayed in multiple columns
with file names similar to output of `ls \-x` command.  See "ls-like view"
section below for format description.
.TP
.BI "'number' 'nu'"
type: boolean
.br
default: false
.br
scope: local
.br
Print line number in front of each file name when 'lsview' option is turned off.
Use 'numberwidth' to control width of line number.  Also see 'relativenumber'.
.TP
.BI "'numberwidth' 'nuw'"
type: integer
.br
default: 4
.br
scope: local
.br
Minimal number of characters for line number field.
.TP
.BI "'relativenumber' 'rnu'"
type: boolean
.br
default: false
.br
scope: local
.br
Print relative line number in front of each file name when 'lsview' option is
turned off.  Use 'numberwidth' to control width of line number.  Various
combinations of 'number' and 'relativenumber' lead to such results:

                        nonumber               number

    norelativenumber   | first                |   1 first
                       | second               |   2 second
                       | third                |   3 third

      relativenumber   |   1 first            |   1 first
                       |   0 second           |2    second
                       |   1 third            |   1 third

.TP
.BI "'rulerformat' 'ruf'"
type: string
.br
default: "%l/%S "
.br
Determines the content of the ruler.  Its minimal width is 13 characters and
it's right aligned.  Following macros are supported:
.br
 %= \- separation point between left and right aligned halves of the line
.br
 %l \- file number
.br
 %L \- total number of files in view (including filtered out ones)
.br
 %\- \- number of filtered out files
.br
 %S \- number of displayed files
.br
 %= \- separation point between left and right align items
.br
 %% \- percent sign
.br
 %[ \- designates beginning of an optional block
.br
 %] \- designates end of an optional block
.br

Percent sign can be followed by optional minimum field width.  Add '\-' before
minimum field width if you want field to be right aligned.  Note ambiguity with
number of filtered out files, which can be resolved with the help of width
field ("%0-").

Example:

.EX
  set rulerformat='%2l-%S%[ +%0-%]'
.EE
.TP
.BI 'runexec'
type: boolean
.br
default: false
.br
Run executable file on Enter or l.
.TP
.BI "'scrollbind' 'scb'"
type: boolean
.br
default: false
.br
When this option is set, vifm will try to keep difference of scrolling positions
of two windows constant.
.TP
.BI "'scrolloff' 'so'"
type: integer
.br
default: 0
.br
Minimal number of screen lines to keep above and below the cursor.  If you
want cursor line to always be in the middle of the view (except at the
beginning or end of the file list), set this option to some large value
(e.g. 999).
.TP
.BI "'shell' 'sh'"
type: string
.br
default: $SHELL or "/bin/sh" or "cmd" (on MS-Windows)
.br
Full path to the shell to use to run external commands.  On *nix a shell
argument can be supplied.
.TP
.BI "'shortmess' 'shm'"
type: charset
.br
default: "p"
.br
Contains a sequence of single-character flags.  Each flag enables shortening
of some message displayed by vifm in the TUI.  Flags:
.br
T \- truncate status-bar messages in the middle if they are too long to fit on \
the command line.  "..." will appear in the middle.
.br
p \- use tilde shortening in view titles.

.TP
.BI 'sizefmt'
type: string list
.br
default: "units:iec"
.br
Configures the way size is formatted in human-friendly way.

    item          value         meaning
    units:        iec           Use 1024 byte units (K or KiB, etc.).
                                See 'iec' option.
                  si            Use 1000 byte units (KB, etc.).
    precision:    i > 0         How many fraction digits to consider.
                  {not set}     Precision of 1 for integer part < 10,
                                0 otherwise (provides old behaviour).

Numbers are rounded from zero.  Trailing zeros are dropped.

Example:
.EX

  set sizefmt=units:iec,precision:2
.EE

.TP
.BI 'slowfs'
type: string list
.br
default: ""
.br
only for *nix
.br
A list of mounter fs name beginnings (first column in /etc/mtab or
/proc/mounts) or paths prefixes for fs/directories that work too slow for
you.  This option can be used to stop vifm from making some requests to
particular kinds of file systems that can slow down file browsing.
Currently this means don't check if directory has changed, skip check if
target of symbolic links exists, assume that link target located on slow fs
to be a directory (allows entering directories and navigating to files via gf).
If you set the option to "*", it means all the systems are considered slow
(useful for cygwin, where all the checks might render vifm very slow if there
are network mounts).

Example for autofs root /mnt/autofs:
.EX

  set slowfs+=/mnt/autofs
.EE
.TP
.BI "'smartcase' 'scs'"
type: boolean
.br
default: false
.br
Overrides the ignorecase option if the search pattern contains at least one
upper case character.  Only used when ignorecase option is enabled.  It doesn't
affect file filtering.
.TP
.BI 'sort'
type: string list
.br
default: +name on *nix and +iname on Windows
.br
scope: local
.br
Sets list of sorting keys (first item is primary key, second is secondary key,
etc.):
   [+\-]ext     \- extension of files and directories
   [+\-]fileext \- extension of files only
   [+\-]name    \- name (including extension)
   [+\-]iname   \- name (including extension, ignores case)
   [+\-]type    \- file type (dir/reg/exe/link/char/block/sock/fifo)
   [+\-]dir     \- directory grouping (directory < file)
   [+\-]gid     \- group id (*nix only)
   [+\-]gname   \- group name (*nix only)
   [+\-]mode    \- file type derived from its mode (*nix only)
   [+\-]perms   \- permissions string (*nix only)
   [+\-]uid     \- owner id (*nix only)
   [+\-]uname   \- owner name (*nix only)
   [+\-]nlinks  \- number of hard links (*nix only)
   [+\-]size    \- size
   [+\-]nitems  \- number of items in a directory (zero for files)
   [+\-]groups  \- groups extracted via regexps from 'sortgroups'
   [+\-]target  \- symbolic link target (empty for other file types)
   [+\-]atime   \- time accessed (e.g. read, executed)
   [+\-]ctime   \- time changed (changes in metadata, e.g. mode)
   [+\-]mtime   \- time modified (when file contents is changed)

Note: look for st_atime, st_ctime and st_mtime in "man 2 stat" for more
information on time keys.

\(aq+\(aq means ascending sort for this key, and '\-' means descending sort.

"dir" key is somewhat similar in this regard but it's added implicitly:
when "dir" is not specified, sorting behaves as if it was the first key in
the list.  That's why if one wants sorting algorithm to mix directories and
files, "dir" should be appended to sorting option, for example like this:
.EX

  set sort+=dir

.EE
or
.EX

  set sort=-size,dir
.EE

Value of the option is checked to include dir key and default sorting
key (name on *nix, iname on Windows).  Here is what happens if one of them is
missing:
.RS
.RS 2
.IP \- 2
type key is added at the beginning;
.IP \- 2
default key is added at the end;
.RE
.RE

.RS
all other keys are left untouched (at most they are moved).

This option also changes view columns according to primary sorting key set,
unless 'viewcolumns' option is not empty.
.RE
.TP
.BI 'sortnumbers'
type: boolean
.br
default: false
.br
scope: local
.br
Natural sort of (version) numbers within text.
.TP
.BI 'sortgroups'
type: string
.br
default: ""
.br
scope: local
.br
Sets comma-separated list of regular expressions to use for group sorting,
double comma is literal comma.  Each expression should contain at least one
group or its value will be considered to be always empty.  Only first match of
each regular expression is considered.  Groups are considered from right to
first similar to 'sort', first group divides list of files into sub-groups, each
of which is sorted by the second group and so on.

Example:
.EX
  set sortgroups=-(done|todo).*
.EE
this would put files with "\-done" in their names above all files with "\-todo".
.TP
.BI 'sortorder'
type: enumeration
.br
default: ascending
.br
Sets sort order for primary key: ascending, descending.
.TP
.BI "'statusline' 'stl'"
type: string
.br
default: ""
.br
Determines the content of the status line (the line right above command-line).
Empty string means use same format like in previous versions.  Following macros
are supported:
.RS
.IP \- 2
%t \- file name (considering value of the 'classify' option)
.IP \- 2
%T - symbolic link target (empty for other filetypes)
.IP \- 2
%f - file name relative to current directory (considers 'classify')
.IP \- 2
%A \- file attributes (permissions on *nix or properties on Windows)
%u \- user name or uid (if it cannot be resolved)
.IP \- 2
%g \- group name or gid (if it cannot be resolved)
.IP \- 2
%s \- file size in human readable format
.IP \- 2
%E \- size of selected files in human readable format, same as %s when no
files are selected, except that it will never show size of ../ in visual mode,
since it cannot be selected
.IP \- 2
%d \- file modification date (uses 'timefmt' option)
.IP \- 2
%D \- path of the other pane for single-pane layout
.IP \- 2
%a - amount of free space available at current partition
.IP \- 2
%z - short tips/tricks/hints that chosen randomly after one minute period
.IP \- 2
all 'rulerformat' macros
.RE

.RS
Percent sign can be followed by optional minimum field width.  Add '\-' before
minimum field width if you want field to be right aligned.
Example:

.EX
  set statusline="  %t%= %A %10u:%\-7g %15s %20d "
.EE

On Windows file properties include the following flags (upper case means flag is
on):
.br
 A \- archive
.br
 H \- hidden
.br
 I \- content isn't indexed
.br
 R \- readonly
.br
 S \- system
.br
 C \- compressed
.br
 D \- directory
.br
 E \- encrypted
.br
 P \- reparse point (e.g. symbolic link)
.br
 Z \- sparse file
.RE
.TP
.BI 'suggestoptions'
type: string list
.br
default:
.br
Controls when, for what and how suggestions are displayed.  The following
values are available:
 - normal          - in normal mode;
 - visual          - in visual mode;
 - view            - in view mode;
 - otherpane       - use other pane to display suggestions, when available;
 - delay[:num]     - display suggestions after a small delay (to do not annoy \
if you just want to type a fast shortcut consisting of multiple keys), num \
specifies the delay in ms (500 by default), 'timeoutlen' at most;
 - keys            - include shortcuts (commands and selectors);
 - marks           - include marks;
 - registers[:num] - include registers, at most num files (5 by default).
.TP
.BI 'syscalls'
type: boolean
.br
default: false
.br
When disabled, vifm will rely on external applications to perform file-system
operations, otherwise system calls are used instead (much faster).  The
feature is {EXPERIMENTAL} and {WORK-IN-PROGRESS}.  The option will be
eventually removed.  Mostly *nix-like systems are affected.
.TP
.BI "'tabstop' 'ts'"
type: integer
.br
default: value from curses library
.br
Number of spaces that a Tab in the file counts for.
.TP
.BI 'timefmt'
type: string
.br
default: " %m/%d %H:%M"
.br
Format of time in file list.  See "man 1 date" or "man 3 strftime" for details.
.TP
.BI "'timeoutlen' 'tm'"
type: integer
.br
default: 1000
.br
The time in milliseconds that is waited for a mapped key in case of already
typed key sequence is ambiguous.
.TP
.BI 'title'
type: boolean
.br
default: true when title can be restored, false otherwise
.br
When enabled title of the terminal or terminal multiplexer's window is updated
according to current location.
.TP
.BI 'trash'
type: boolean
.br
default: true
.br
Use trash directory.  See "Trash directory" section below.
.TP
.BI 'trashdir'
type: string
.br
default: on *nix:
   "%r/.vifm-Trash-%u,$VIFM/Trash,%r/.vifm-Trash"
   or if $VIFM/Trash doesn't exist
   "%r/.vifm-Trash-%u,$XDG_DATA_HOME/vifm/Trash,%r/.vifm-Trash"
         on Windows:
   "%r/.vifm-Trash,$XDG_DATA_HOME/vifm/Trash"
.br
List of trash directory path specifications, separated with commas.
Each list item either defines an absolute path to trash directory or a path
relative to a mount point root when list element starts with "%r/".
Value of the option can contain environment variables (of form "$envname"),
which will be expanded (prepend $ with a slash to prevent expansion).
Environment variables are expanded when the option is set.

On *nix, if element ends with "%u", the mark is replaced with real user ID and
permissions are set so that only that only owner is able to use it.
.br
.B Note
that even this setup is not completely secure when combined with "%r/" and it's
overall safer to keep files in home directory, but that implies cost of copying
files between partitions.

When new file gets cut (deleted) vifm traverses each element of the option in
the order of their appearance and uses first trash directory that it was able
to create or that is already writable.

Default value tries to use trash directory per mount point and falls back to
~/.vifm/Trash on failure.

Will attempt to create the directory if it does not exist.  See
"Trash directory" section below.
.TP
.BI 'trash_filefmt_zero'
type: string
.br
default: "%name"
.br
The name of a file when it is moved to the trash directory and no other files in
the trash directory have the same name. The '%name' token is replaced with the
name of the actual file. The token can be combined with other characters, or
with the '%count' token which in this case would always be zero.

See also 'trash_filefmt_more'.
.TP
.BI 'trash_filefmt_more'
type: string
.br
default: "%name (%count)"
.br
The name of a file when it is moved to the trash directory and other files exist
in the trash directory with the same, or a similar name. The '%name' token is
replaced with the name of the actual file, while the '%count' token is replaced
with the number of files with the same or a similar name. The tokens can be
combined with other characters.

As an example, if there are two files with the names
    example
    example (1)
in the trash directory, and the user deletes a third file called example (not in
the trash directory), then the contents of the trash directory would become
    example
    example (1)
    example (2)
.TP
.BI "'tuioptions' 'to'"
type: charset
.br
default: "ps"
.br
Each flag configures some aspect of TUI appearance.  The flags are:
.br
p \- when included:
  * file list inside a pane gets additional single character padding on left \
and right sides;
  * quick view and view mode get single character padding.
.br
s \- when included, left and right borders (side borders, hence "s" character)
are visible.
.TP
.BI "'undolevels' 'ul'"
type: integer
.br
default: 100
.br
Maximum number of changes that can be undone.  Note that here single file
operation is used as a unit, not operation, i.e. deletion of 101 files will
exceed default limit.
.TP
.BI 'vicmd'
type: string
.br
default: "vim"
.br
The actual command used to start vi.  Ampersand sign at the end (regardless
whether it's preceded by space or not) means backgrounding of command.
.TP
.BI 'viewcolumns'
type: string
.br
default: ""
.br
scope: local
.br
Format string containing list of columns in the view.  When this option is empty
view columns to show are chosen automatically using sorting keys (see 'sort') as
a base.  Value of this option is ignored if 'lsview' is set.  See "Column view"
section below for format description.

An example of setting the options for both panes (note :windo command):
.EX

  windo set viewcolumns=-{name}..,6{size},11{perms}
.EE
.TP
.BI 'vixcmd'
type: string
.br
default: value of 'vicmd'
.br
The command used to start vi when in X.  Ampersand sign at the end (regardless
whether it's preceded by space or not) means backgrounding of command.
.TP
.BI 'vifminfo'
type: set
.br
default: bookmarks,bmarks
.br
Controls what will be saved in the $VIFM/vifminfo file.

   bmarks    \- named bookmarks
   bookmarks \- marks, except special ones like '< and '>
   tui       \- state of the user interface (sorting, number of windows, quick
               view state, active view)
   dhistory  \- directory history
   state     \- file name and dot filters and terminal multiplexers integration
               state
   cs        \- primary color scheme
   savedirs  \- save last visited directory (requires dhistory)
   chistory  \- command line history
   shistory  \- search history (/ and ? commands)
   phistory  \- prompt history
   fhistory  \- history of local filter (see description of the "=" normal mode
               command)
   dirstack  \- directory stack overwrites previous stack, unless stack of
               current session is empty
   registers \- registers content
   options   \- all options that can be set with the :set command (obsolete)
   filetypes \- associated programs and viewers (obsolete)
   commands  \- user defined commands (see :command description) (obsolete)
.TP
.BI 'vimhelp'
type: boolean
.br
default: false
.br
Use vim help format.
.TP
.BI "'wildmenu' 'wmnu'"
type: boolean
.br
default: false
.br
Controls whether possible matches of completion will be shown above the command
line.
.TP
.BI 'wildstyle'
type: enumeration
.br
default: bar
.br
Picks presentation style of wild menu.  Possible values:
 - bar   - one-line with left-to-right cursor
 - popup - multi-line with top-to-bottom cursor
.TP
.BI 'wordchars'
type: string list
.br
default: "1-8,14-31,33-255" (that is all non-whitespace characters)
.br
Specifies which characters in command-line mode should be considered as part
of a word.  Value of the option is comma-separated list of ranges.  If both
endpoints of a range match, single endpoint is enough (e.g. "a" = "a-a").
Both endpoints are inclusive.  There are two accepted forms: character
representing itself or number encoding character according to ASCII table.
In case of ambiguous characters (dash, comma, digit) use numeric form.
Accepted characters are in the range from 0 to 255.  Any Unicode character
with code greater than 255 is considered to be part of a word.

The option affects Alt-D, Alt-B and Alt-F, but not Ctrl-W.  This is
intentionally to allow two use cases:

 \- Moving by WORDS and deletion by words.
 \- Moving by words and deletion by WORDS.

To get the latter use the following mapping:
.EX

  cnoremap <c-w> <a-b><a-d>

.EE
Also used for abbreviations.
.TP
.BI 'wrap'
type: boolean
.br
default: true
.br
Controls whether to wrap text in quick view.
.TP
.BI "'wrapscan' 'ws'"
type: boolean
.br
default: true
.br
Searches wrap around end of the list.
.\" ---------------------------------------------------------------------------
.SH Mappings
.\" ---------------------------------------------------------------------------
Since it's not easy to enter special characters there are several special
sequences that can be used in place of them.  They are:
.TP
.BI <cr>
Enter key.
.TP
.BI <esc>
Escape key.
.TP
.BI <space>
Space key.
.TP
.BI <lt>
Less-than character (<).
.TP
.BI <nop>
provides a way to disable a mapping (by mapping it to <nop>).
.TP
.BI <bs>
Backspace key (see key conflict description below).
.TP
.BI "<tab> <s-tab>"
Tabulation and Shift+Tabulation keys.
.TP
.BI "<home> <end>"
Home/End.
.TP
.BI "<left> <right> <up> <down>"
Arrow keys.
.TP
.BI "<pageup> <pagedown>"
PageUp/PageDown.
.TP
.BI "<del> <delete>"
Delete key.  <del> and <delete> mean different codes, but <delete> is more
common.
.TP
.BI "<c-a>,<c-b>,...,<c-z>,<c-[>,<c-\>,<c-]>,<c-^>,<c-_>"
Control + some key (see key conflict description below).
.TP
.BI "<a-a>,<a-b>,...,<a-z>"
.BI "<m-a>,<m-b>,...,<m-z>"
Alt + some key.
.TP
.BI "<a-c-a>,<a-c-b>,...,<a-c-z>"
.BI "<m-c-a>,<m-c-b>,...,<m-c-z>"
only for *nix
.br
Alt + Ctrl + some key.
.TP
.BI "<f0> \- <f63>"
Functional keys.
.TP
.BI "<c-f1> \- <c-f12>"
only for MS-Windows
.br
functional keys with Control key pressed.
.TP
.BI "<a-f1> \- <a-f12>"
only for MS-Windows
.br
functional keys with Alt key pressed.
.TP
.BI "<s-f1> \- <s-f12>"
only for MS-Windows
.br
functional keys with Shift key pressed.
.LP
Note that due to the way terminals process their input, several keyboard keys
might be mapped to single key code, for example:
.RS 2
.IP \- 2
<cr> and <c-m>;
.IP \- 2
<tab> and <c-i>;
.IP \- 2
<c-h> and <bs>;
.IP \- 2
etc.
.RE

Most of the time they are defined consistenly and don't cause surprises, but
<c-h> and <bs> are treated differently in different environments (although they
match each other all the time), that's why they correspond to different keys
in vifm.  As a consequence, if you map <c-h> or <bs> be sure to map the other
one to the same combination so that the mapping will work in all environments.

vifm removes whitespace characters at the beginning and end of commands.
That's why you may want to use <space> at the end of rhs in mappings.  For
example:

.EX
  cmap <f1> man<space>
.EE

will put "man " in line when you hit the <f1> key in the command line mode.
.\" ---------------------------------------------------------------------------
.SH Expression syntax
.\" ---------------------------------------------------------------------------
Supported expressions is a subset of what VimL provides.

Expression syntax summary, from least to most significant:

expr1      expr2 || expr2 ..       logical OR

expr2      expr3 && expr3 ..       logical AND

expr3      expr4 == expr4          equal
           expr4 != expr4          not equal
           expr4 >  expr4          greater than
           expr4 >= expr4          greater than or equal
           expr4 <  expr4          smaller than
           expr4 <= expr4          smaller than or equal

expr4      expr5 . expr5 ..        string concatenation

expr5      \- expr5                 unary minus
           + expr5                 unary plus
           ! expr5                 logical NOT

expr6      number                  number constant
           "string"                string constant, \\ is special
           'string'                string constant, ' is doubled
           &option                 option value
           $VAR                    environment variable
           v:var                   builtin variable
           function(expr1, ...)    function call

".." indicates that the operations in this level can be concatenated.

expr1
.br
-----
.br
expr2 || expr1

Arguments are converted to numbers before evaluation.

Result is non-zero if at least one of arguments is non-zero.

It's right associative and with short-circuiting, so sub-expressions are
evaluated from left to right until result of whole expression is determined
(i.e., until first non-zero) or end of the expression.

expr2
.br
-----
.br
expr3 && expr2

Arguments are converted to numbers before evaluation.

Result is non-zero only if both arguments are non-zero.

It's right associative and with short-circuiting, so sub-expressions are
evaluated from left to right until result of whole expression is determined
(i.e., until first zero) or end of the expression.

expr3
.br
-----
.br
expr4 {cmp} expr4

Compare two expr4 expressions, resulting in a 0 if it evaluates to false or 1
if it evaluates to true.

equal                   ==
.br
not equal               !=
.br
greater than            >
.br
greater than or equal   >=
.br
smaller than            <
.br
smaller than or equal   <=

Examples:

.EX
  'a' ==  'a'         == 1
  'a' >   'b'         == 1
  'a' ==  'b'         == 0
  '2' >   'b'         == 0
   2  >   'b'         == 1
   2  >   '1b'        == 1
   2  >   '9b'        == 0
  \-1  == \-'1'         == 1
   0  ==  '\-\-1'       == 1
.EE

expr4
.br
-----
.br
expr5 . expr5 ..     string concatenation

Examples:

.EX
  'a' . 'b'           == 'ab'
  'aaa' . '' . 'c'    == 'aaac'
.EE

expr5
.br
-----
.br

\- expr5              unary minus
.br
+ expr5              unary plus
.br
! expr5              logical NOT

For '\-' the sign of the number is changed.
.br
For '+' the number is unchanged.
.br
For '!' non-zero becomes zero, zero becomes one.

A String will be converted to a Number first.

These operations can be repeated and mixed.  Examples:

.EX
   \-\-9                == 9
  \-\-\-9                == \-9
   \-+9                == 9
   !\-9                == 0
   !''                == 1
  !'x'                == 0
   !!9                == 1
.EE

expr6
.br
-----
.br

number               number constant
.br
-----
.br

Decimal number.  Examples:

.EX
  0                   == 0
  0000                == 0
  01                  == 1
  123                 == 123
  10000               == 10000
.EE

string
.br
------
.br
"string"             string constant

Note that double quotes are used.

A string constant accepts these special characters:
.br
  \\b      backspace <bs>
.br
  \\e      escape <esc>
.br
  \\n      newline
.br
  \\r      return <cr>
.br
  \\t      tab <tab>
.br
  \\\\      backslash
.br
  \\"      double quote
.br

Examples:

.EX
  "\\"Hello,\\tWorld!\\""
  "Hi,\\nthere!"
.EE

literal-string
.br
--------------
.br
\(aqstring\(aq             string constant

Note that single quotes are used.

This string is taken as it is.  No backslashes are removed or have a special
meaning.  The only exception is that two quotes stand for one quote.

Examples:

.EX
  'All\\slashes\\are\\saved.'
  'This string contains doubled single quotes ''here'''
.EE

option
.br
------
.br
&option               option value (local one is preferred, if exists)
&g:option             global option value
&l:option             local option value

Examples:

.EX
  echo 'Terminal size: '.&columns.'x'.&lines
  if &columns > 100
.EE

Any valid option name can be used here (note that "all" in ":set all" is a
pseudo option).  See ":set options" section above.

environment variable
.br
--------------------
.br
$VAR                  environment variable

The String value of any environment variable.  When it is not defined, the
result is an empty string.

Examples:

.EX
  'This is my $PATH env: ' . $PATH
  'vifmrc at ' . $MYVIFMRC . ' is used.'
.EE

builtin variable
.br
--------------------
.br
v:var                 builtin variable

Information exposed by vifm for use in scripting.  Only v:servername at the
moment.

function call
.br
-------------
.br
function(expr1, ...)  function call

See "Functions" section below.

Examples:

.EX
  "'" . filetype('.') . "'"
  filetype('.') == 'reg'
.EE
.\" ---------------------------------------------------------------------------
.SH Functions
.\" ---------------------------------------------------------------------------
USAGE               RESULT        DESCRIPTION

chooseopt({opt})    String        Queries choose parameters passed on startup.
.br
executable({expr})  Integer       Checks whether {expr} command available.
.br
expand({expr})      String        Expands special keywords in {expr}.
.br
filetype({fnum})    String        Returns file type from position.
.br
getpanetype()       String        Returns type of current pane.
.br
has({property})     Integer       Checks whether instance has {property}.
.br
layoutis({type})    Integer       Checks whether layout is of type {type}.
.br
paneisat({loc})     Integer       Checks whether current pane is at {loc}.
.br
system({command})   String        Executes shell command and returns its output.

.BI chooseopt({opt})

Retrieves values of options related to file choosing.  {opt} can be one of:
    files      returns argument of \-\-choose-files or empty string
    dir        returns argument of \-\-choose-dir or empty string
    cmd        returns argument of \-\-on-choose or empty string
    delimiter  returns argument of \-\-delimiter or the default one (\\n)

.BI executable({expr})

If {expr} is absolute or relative path, checks whether path destination exists
and refers to an executable, otherwise checks whether command named {expr} is
present in directories listed in $PATH.  Checks for various executable
extensions on Windows.  Returns boolean value describing result of the check.

Example:

.EX
  " use custom default viewer script if it's available and installed
  " in predefined system directory, otherwise try to find it elsewhere
  if executable('/usr/local/bin/defviewer')
      fileview * /usr/local/bin/defviewer %c
  else
      if executable('defviewer')
          fileview * defviewer %c
      endif
  endif
.EE

.BI expand({expr})

Expands environment variables and macros in {expr} just like it's done for
command-line commands.  Returns a string.  See "Command macros" section above.
.br

Examples:

.EX
  " percent sign
  :echo expand('%%')
  " the last part of directory name of the other pane
  :echo expand('%D:t')
  " $PATH environment variable (same as `:echo $PATH`)
  :echo expand('$PATH')
.EE

.BI filetype({fnum})

The result is a string, which represents file type and is one of the list:
    exe    executables
    reg    regular files
    link   symbolic links
    dir    directories
    char   character devices
    block  block devices
    fifo   pipes
    sock   *nix domain sockets
    ?      unknown file type (should never appear)

Parameter {fnum} can have following values:
    \- '.' to get type of file under the cursor in the active pane

.BI getpanetype()

Retrieves string describing type of current pane.  Possible return values:
    regular      regular file listing of some directory
    custom       custom file list (%u)
    very-custom  very custom file list (%U)
    tree         tree view

.BI has({property})

Allows examining internal parameters from scripts to e.g. figure out
environment in which application is running.  Returns 1 if property is
true/present, otherwise 0 is returned.  Currently the following properties
are supported (anything else will yield 0):
    unix  runs in *nix-like environment (including Cygwin)
    win   runs on Windows
.br

Usage example:

.EX
  " skip user/group on Windows
  if !has('win')
      let $RIGHTS = '%10u:%-7g '
  endif

  execute 'set' 'statusline="  %t%= %A '.$RIGHTS.'%15E %20d  "'
.EE

.BI layoutis({type})

Checks whether current interface layout is {type} or not, where {type} can be:
    only    single-pane mode
    split   double-pane mode (either vertical or horizon split)
    vsplit  vertical split (left and right panes)
    hsplit  horizontal split (top and bottom panes)
.br

Usage example:

.EX
  " automatically split vertically before enabling preview
  :nnoremap w :if layoutis('only') | vsplit | endif | view!<cr>
.EE

.BI paneisat({loc})

Checks whether position of active pane in current layout matches one of the
following locations:
    top     pane reaches top border
    bottom  pane reaches bottom border
    left    pane reaches left border
    right   pane reaches right border
.br

.BI system({command})

Runs the command in shell and returns its output (joined standard output and
standard error streams).  All trailing newline characters are stripped to
allow easy appending to command output.  Ctrl-C should interrupt the command.

Usage example:

.EX
  " command to enter .git/ directory of git-repository (when ran inside one)
  command! cdgit :execute 'cd' system('git rev-parse \-\-git-dir')
.EE
.\" ---------------------------------------------------------------------------
.SH Menus and dialogs
.\" ---------------------------------------------------------------------------
When navigating to some path from a menu there is a difference in end location
depending on whether path has trailing slash or not.  Files normally don't
have trailing slashes so "file/" won't work and one can only navigate to
a file anyway.  On the other hand with directories there are two options:
navigate to a directory or inside of it.  To allow both use cases, the first
one is used on paths like "dir" and the second one for "dir/".

.B Commands

.BI :range
navigate to a menu line.
.TP
.BI ":exi[t][!] :q[uit][!] :x[it][!]"
leave menu mode.
.TP
.BI :noh[lsearch]
reset search match highlighting.
.TP
.BI ":w[rite] {dest}"
write all menu lines into file specified by {dest}.
.LP
.B General

j, Ctrl-N \- move down.
.br
k, Ctrl-P \- move up.
.br
Enter, l \- select and exit the menu.
.br
Ctrl-L \- redraw the menu.

Escape, Ctrl-C, ZZ, ZQ, q \- quit.

.B In all menus

The following set of keys has the same meaning as in normal mode.

Ctrl-B, Ctrl-F
.br
Ctrl-D, Ctrl-U
.br
Ctrl-E, Ctrl-Y
.br
/, ?
.br
n, N
.br
[count]G, [count]gg
.br
H, M, L
.br
zb, zt, zz

zh \- scroll menu items [count] characters to the right.
.br
zl \- scroll menu items [count] characters to the left.
.br
zH \- scroll menu items half of screen width characters to the right.
.br
zL \- scroll menu items half of screen width characters to the left.

: \- enter command line mode for menus (currently only :exi[t], :q[uit], :x[it]
and :{range} are supported).

b \- interpret content of the menu as list of paths and use it to create custom
view in place of previously active pane.  See "Custom views" section below.
.br
B \- same as above, but creates unsorted view.

v \- load menu content into quickfix list of the editor (Vim compatible by
assumption) or if list doesn't have separators after file names (colons) open
each line as a file name.


Below is description of additional commands and reaction on selection in some
menus and dialogs.

.B Apropos menu

Selecting menu item run man on a given topic.  Menu won't be closed
automatically to allow view several pages one by one.

.B Command-line mode abbreviations menu

Type dd on an abbreviation to remove it.

c leaves menu preserving file selection and inserts right-hand side of
selected command into command-line.

.B Color scheme menu

Selecting name of a color scheme applies it the same way as if
":colorscheme <name>" was executed on the command-line.

.B Commands menu

Selecting command executes it with empty arguments (%a).

dd on a command to remove.

.B Marks menu

Selecting mark navigates to it.

dd on a mark to remove it.

.B Bookmarks menu

Selecting a bookmark navigates to it.

Type dd on a bookmark to remove it.

gf and e also work to make it more convenient to bookmark files.

.B Trash (:lstrash) menu

r on a file name to restore it from trash.

dd deletes file under the cursor.

.B Trashes menu

dd empties selected trash in background.

.B Directory history and Trashes menus

Selecting directory name will change directory of the current view as if :cd
command was used.

.B Directory stack menu

Selecting directory name will rotate stack to put selected directory pair at the
top of the stack.

.B Filetype menu

Commands from vifmrc or typed in command-line are displayed above empty line.
All commands below empty line are from .desktop files.

c leaves menu preserving file selection and inserts command after :! in
command-line mode.

.B Grep, find, locate, bookmarks and user menu with navigation (%M macro)

gf \- navigate previously active view to currently selected item.  Leaves menu
mode except for grep menu.  Pressing Enter key has the same effect.

e \- open selected path in the editor, stays in menu mode.

c \- leave menu preserving file selection and insert file name after :! in
command-line mode.

.B User menu without navigation (%m macro)

c leaves menu preserving file selection and inserts whole line after :! in
command-line mode.

.B Grep menu

Selecting file (via Enter or l key) opens it in editor set by 'vicmd' at given
line number.  Menu won't be closed automatically to allow viewing more than one
result.

See above for "gf" and "e" keys description.

.B Command-line history menu

Selecting an item executes it as command-line command, search query or local
filter.

c leaves menu preserving file selection and inserts line into command-line of
appropriate kind.

.B Volumes menu

Selecting a drive navigates previously active pane to the root of that drive.

.B Fileinfo dialog

Enter, q \- close dialog

.B Sort dialog

h, Space \- switch ascending/descending.
.br
q \- close dialog

One shortcut per sorting key (see the dialog).

.B Attributes (permissions or properties) dialog

h, Space \- check/uncheck.
.br
q \- close dialog

Item states:
.IP \- 2
* \- checked flag.
.IP \- 2
X \- means that it has different value for files in selection.
.IP \- 2
d (*nix only) \- (only for execute flags) means u\-x+X, g\-x+X or o\-x+X \
argument for the chmod program.  If you're not on OS X and want to remove \
execute permission bit from all files, but preserve it for directories, set \
all execute flags to 'd' and check \(aqSet Recursively\(aq flag.
.LP
.B Jobs menu

dd requests cancellation of job under cursor.  The job won't be removed from
the list, but marked as being cancelled (if cancellation was successfully
requested).  A message will pop up if the job has already stopped.
Note that on Windows cancelling external programs like this might not work,
because their parent shell doesn't have any windows.

e key displays errors of selected job if any were collected.  They are
displayed in a new menu, but you can get back to jobs menu by pressing h.

.\" ---------------------------------------------------------------------------
.SH Custom views
.\" ---------------------------------------------------------------------------
.B Definition

Normally file views contain list of files from a single directory, but
sometimes it's useful to populate them with list of files that do not belong
to the same directory, which is what custom views are for.

.B Presentation

Custom views are still related to directory they were in before custom list
was loaded.  Path to that directory (original directory) can be seen in the
title of a custom view.

Files in same directory have to be named differently, this doesn't hold for
custom views thus seeing just file names might be rather confusing.  In order
to give an idea where files come from and when possible, relative paths to
original directory of the view is displayed, otherwise full path is used
instead.

Custom views normally don't contain any inexistent files.

.B Navigation

Custom views have some differences related to navigation in regular views.

gf - acts similar to gf on symbolic links and navigates to the file at its real
     location.

h - go to closes parent node in tree view, otherwise return to the original
directory.

gh - return to the original directory.

Opening ".." entry also causes return to the original directory.

.B History

Custom list exists only while it's visible, once left one can't return to it,
so there is no appearances of it in any history.

.B Filters

Only local filter affects content of the view.  This is intentional,
presumably if one loads list, precisely that list should be displayed (except
for inexistent paths, which are ignored).

.B Search

Although directory names are visible in listing, they are not searchable.  Only
file names are taken into account (might be changed in future, searching whole
lines seems quite reasonable).

.B Sorting

Contrary to search sorting by name works on whole visible part of file path.

.B Highlight

Whole file name is highlighted as one entity, even if there are directory
elements.

.B Updates

Reloads can occur, though they are not automatic due to files being scattered
among different places.  On a reload, inexistent files are removed and meta-data
of all other files is updated.

Once custom view forgets about the file, it won't add it back even if it's
created again.  So not seeing file previously affected by an operation, which
was undone is normal.

.B Operations

All operations that add files are forbidden for custom views.  For example,
moving/copying/putting files into a custom view doesn't work, because it doesn't
make much sense.

On the other hand, operations that use files of a custom view as a source
(e.g. yanking, copying, moving file from custom view, deletion) and operations
that modify names are all allowed.
.\" ---------------------------------------------------------------------------
.SH Compare views
.\" ---------------------------------------------------------------------------
.B Kinds

:compare can produce four different results depending on arguments:
 \- single compare view (ofone and either listall or listdups);
 \- single custom view (ofone and listunique);
 \- two compare views (ofboth and either listall or listdups);
 \- two custom views (ofboth and listunique).

The first two display files of one file system tree.  Here duplicates are
files that have at least one copy in the same tree.  The other two kinds of
operation compare two trees, in which duplicates are files that are found in
both trees.

Lists of unique files are presented in custom views because there is no file
grouping to preserve as all file ids are guaranteed to be distinct.

.B Creation

Arguments passed to :compare form four categories each with its own
prefix and is responsible for particular property of operation.

Which files to compare:
 \- ofboth \- compares files of two panes against each other;
 \- ofone  \- compares files of the same directory.

How files are compared:
 \- byname     \- by their name only;
 \- bysize     \- only by their size;
 \- bycontents \- by combination of size and hash of file contents.

Which files to display:
 \- listall    \- all files;
 \- listunique \- unique files only;
 \- listdups   \- only duplicated files.

How results are grouped (has no effect if "ofone" specified):
 \- groupids   \- files considered identical are always adjacent in output;
 \- grouppaths \- file system ordering is preferred (this also enables \
displaying identically named files as mismatches).

Which files to omit:
 \- skipempty \- ignore empty files.

Each argument can appear multiple times, the rightmost one of the group is
considered.  Arguments alter default behaviour instead of substituting it.

.B Examples

The defaults corresponds to probably the most common use case of comparing
files in two trees with grouping by paths, so the following are equivalent:

.EX
  :compare
  :compare bycontents grouppaths
  :compare bycontents listall ofboth grouppaths
.EE

Another use case is to find duplicates in the current sub-tree:

.EX
  :compare listdups ofone
.EE

The following command lists files that are unique to each pane:

.EX
  :compare listunique
.EE

.B Look

The view can't switch to ls-like view as it's unable to display diff-like
data.

Comparison views have second column displaying id of the file, files with same
id are considered to be equal.  The view columns configuration is predefined.

.B Behaviour

When two views are being compared against each other the following changes to
the regular behaviour apply:
 \- views are scrolled synchronously (as if 'scrollbind' was set);
 \- views' cursors are synchronized;
 \- local filtering is disabled (its results wouldn't be meaningful);
 \- zd excludes groups of adjacent identical files, 1zd gives usual behaviour;
 \- sorting is permanently disabled (ordering is fixed);
 \- removed files hide their counter pairs;
 \- exiting one of the views terminates the other immediately;
 \- renaming files isn't blocked, but isn't taken into account and might \
require regeneration of comparison;
 \- entries which indicate absence of equivalent file have empty names and can \
be matched as such;
 \- when unique files of both views are listed custom views can be empty, this \
absence of unique files is stated clearly.

One compare view has similar properties (those that are applicable for single
pane).

Files are gathered in this way:
 \- recursively starting at current location of the view;
 \- dot files are excluded if view hides them at the moment of comparison;
 \- directories are not taken into account;
 \- symbolic links to directories are ignored.
.\" ---------------------------------------------------------------------------
.SH Startup
.\" ---------------------------------------------------------------------------
On startup vifm determines several variables that are used during the session.
They are determined in the order they appear below.

On *nix systems $HOME is normally present and used as is.
On Windows systems vifm tries to find correct home directory in the following
order:
 \- $HOME variable;
 \- $USERPROFILE variable (on Windows only);
 \- a combination of $HOMEDRIVE and $HOMEPATH variables (on Windows only).

vifm tries to find correct configuration directory by checking the following
places:
 \- $VIFM variable;
 \- parent directory of the executable file (on Windows only);
 \- $HOME/.vifm directory;
 \- $APPDATA/Vifm directory (on Windows only);
 \- $XDG_CONFIG_HOME/vifm directory;
 \- $HOME/.config/vifm directory.

vifm tries to find correct configuration file by checking the following places:
 \- $MYVIFMRC variable;
 \- vifmrc in parent directory of the executable file (on Windows only);
 \- $VIFM/vifmrc file.
.\" ---------------------------------------------------------------------------
.SH Configure
.\" ---------------------------------------------------------------------------
See "Startup" section above for the explanations on $VIFM and $MYVIFMRC.

The vifmrc file contains commands that will be executed on vifm startup.  There
are two such files: global and local.  Global one is at
{prefix}/etc/vifm/vifmrc, see $MYVIFMRC variable description for the search
algorithm used to find local vifmrc.  Global vifmrc is loaded before the local
one, so that the later one can redefine anything configured globally.

Use vifmrc to set settings, mappings, filetypes etc.  To use multi line commands
precede each next line with a slash (whitespace before slash is ignored, but all
spaces at the end of the lines are saved).  For example:

.EX
  set
      \\smartcase
.EE

equals "setsmartcase".  When

.EX
  set<space here>
      \\ smartcase
.EE

equals "set  smartcase".

The $VIFM/vifminfo file contains session settings.  You may edit it by hand
to change the settings, but it's not recommended to do that, edit vifmrc
instead.  You can control what settings will be saved in vifminfo by setting
\(aqvifminfo\(aq option.  Vifm always writes this file on exit unless 'vifminfo'
option is empty.  Marks, bookmarks, commands, histories, filetypes, fileviewers
and registers in the file are merged with vifm configuration (which has bigger
priority).

Generally, runtime configuration has bigger priority during merging, but there
are some exceptions:
.RS 2
.IP \- 2
directory stack stored in the file is not overwritten unless something is
changed in vifm session that performs merge;
.IP \- 2
each mark or bookmark is marked with a timestamp, so that newer value is not
overwritten by older one, thus no matter from where it comes, the newer one
wins.
.RE

The $VIFM/scripts directory can contain shell scripts.  vifm modifies
its PATH environment variable to let user run those scripts without specifying
full path.  All subdirectories of the $VIFM/scripts will be added to PATH too.
Script in a subdirectory overlaps script with the same name in all its parent
directories.

The $VIFM/colors/ and {prefix}/etc/vifm/colors/ directories contain color
schemes.  Available color schemes are searched in that order, so on name
conflict the one in $VIFM/colors/ wins.

Each color scheme should have ".vifm" extension.  This wasn't the case before
and for this reason the following rules apply during lookup:
.RS 2
.IP \- 2
if there is no file with .vifm extension, all regular files are listed;
.IP \- 2
otherwise only files with .vifm extension are listed (with the extension
being truncated).
.RE
.\" ---------------------------------------------------------------------------
.SH Automatic FUSE mounts
.\" ---------------------------------------------------------------------------
vifm has a builtin support of automated FUSE file system mounts.  It is \
implemented using file associations mechanism.  To enable automated mounts, \
one needs to use a specially formatted program line in filetype or \
filextype commands.  Currently two formats are supported:

1) FUSE_MOUNT
This format should be used in case when all information needed for mounting \
all files of a particular type is the same.  E.g. mounting of tar files \
don't require any file specific options.

Format line:
  FUSE_MOUNT|mounter %SOURCE_FILE %DESTINATION_DIR [%FOREGROUND]

Example filetype command:

.EX
  :filetype FUSE_MOUNT|fuse\-zip %SOURCE_FILE %DESTINATION_DIR
.EE

2) FUSE_MOUNT2
This format allows one to use specially formatted files to perform mounting \
and is useful for mounting remotes, for example remote file systems over ftp \
or ssh.

Format line:
  FUSE_MOUNT2|mounter %PARAM %DESTINATION_DIR [%FOREGROUND]

Example filetype command:

.EX
  :filetype FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
.EE

Example file content:

.EX
  root@127.0.0.1:/
.EE

All % macros are expanded by vifm at runtime and have the following meaning:
  \- %SOURCE_FILE is replaced by full path to selected file;
  \- %DESTINATION_DIR is replaced by full path to mount directory, which is \
created by vifm basing on the value of 'fusehome' option;
  \- %PARAM value is filled from the first line of file (whole line), though \
in the future it can be changed to whole file content;
  \- %FOREGROUND means that you want to run mount command as a regular \
command (required to be able to provide input for communication with mounter \
in interactive way).

%FOREGROUND is an optional macro.  Other macros are not mandatory, but mount \
commands likely won't work without them.

%CLEAR is obsolete name of %FOREGROUND, which is still supported, but might be \
removed in future.  Its use is discouraged.

The mounted FUSE file systems will be automatically unmounted in two cases:
.RS 2
.IP \- 2
when vifm quits (with ZZ, :q, etc. or when killed by signal);
.IP \- 2
when you explicitly leave mount point going up to its parent directory (with \
h, Enter on "../" or ":cd ..") and other pane is not in the same directory or \
its child directories.
.RE
.\" ---------------------------------------------------------------------------
.SH View look
.\" ---------------------------------------------------------------------------
vifm supports displaying of file list view in two different ways:
.RS 2
.IP \- 2
in a table mode, when multiple columns can be set using 'viewcolumns' option
(see "Column view" section below for details);
.IP \- 2
in a multicolumn list manner which looks almost like `ls \-x` command output
(see "ls-like view" section below for details).
.RE

The look is local for each view and can be chosen by changing value of the
\(aqlsview\(aq boolean option.

Depending on view look some of keys change their meaning to allow more natural
cursor moving.  This concerns mainly h, j, k, l and other similar navigation
keys.

Also some of options can be ignored if they don't affect view displaying in
selected look.  For example value of 'viewcolumns' when 'lsview' is set.
.\" ---------------------------------------------------------------------------
.SH ls-like view
.\" ---------------------------------------------------------------------------
When this view look is enabled by setting 'lsview' option on, vifm will display
files in multiple columns.  Number of columns depends on the length of the
longest file name present in current directory of the view.  Whole file list is
automatically reflowed on directory change, terminal or view resize.

View looks close to output of `ls \-x` command, so files are listed left to
right in rows.

In this mode file manipulation commands (e.g. d) don't work line-wise like they
do in Vim, since such operations would be uncommon for file manipulating
tasks.  Thus, for example, dd will remove only current file.

Note that tree-view and compare view inhibit ls-like view.
.\" ---------------------------------------------------------------------------
.SH Column view
.\" ---------------------------------------------------------------------------
View columns are described by a comma-separated list of column descriptions,
each of which has the following format
    [ '\-' ] [ fw ( [ '.' tw ] | '%' ) ] '{' type '}' '.'{0,3}
.br
where fw stands for full width and tw stands for text width.

So it basically consists of four parts:
 1. Optional alignment specifier
 2. Optional width specifier
 3. Mandatory column name
 4. Optional cropping specifier

.B Alignment specifier

It's an optional minus or asterisk sign as the first symbol of the string.

Specifies type of text alignment within a column.  Three types are supported:
.IP \- 2
left align

.EX
  set viewcolumns=\-{name}
.EE
.IP \- 2
right align (default)

.EX
  set viewcolumns={name}
.EE
.IP \- 2
dynamic align

It's like left alignment, but when the text is bigger than the column, the
alignment is made at the right (so the part of the field is always visible).

.EX
  set viewcolumns=*{name}
.EE
.LP
.B Width specifier

It's a number followed by a percent sign, two numbers (second one should be
less than or equal to the first one) separated with a dot or a single number.

Specifies column width and its units. There are three size types:
.IP \- 2
absolute size \- column width is specified in characters

.EX
  set viewcolumns=\-100{name},20.15{ext}
.EE

results in two columns with lengths of 100 and 20 and a reserved space of five \
characters on the left of second column.
.IP \- 2
relative (percent) size \- column width is specified in percents of view width

.EX
  set viewcolumns=\-80%{name},15%{ext},5%{mtime}
.EE

results in three columns with lengths of 80/100, 15/100 and 5/100 of view width.
.IP \- 2
auto size (default) \- column width is automatically determined

.EX
  set viewcolumns=\-{name},{ext},{mtime}
.EE

results in three columns with length of one third of view width. There is no \
size adjustment to content, since it will slow down rendering.
.LP
Columns of different sizing types can be freely mixed in one view. Though
sometimes some of columns can be seen partly or be completely invisible if
there is not enough space to display them.
.LP
.B Column name

This is just a sort key surrounded with curly braces, e.g.

.EX
  {name},{ext},{mtime}
.EE

{name} and {iname} keys are the same and present both for consistency with
\(aqsort\(aq option.

Empty curly braces ({}) are replaced with the default secondary column for
primary sort key. So after the next command view will be displayed almost as
if 'viewcolumns' is empty, but adding ellipsis for long file names:

.EX
  set viewcolumns=\-{name}..,6{}.
.EE
.LP
.B Cropping specifier

It's from one to three dots after closing curly brace in column format.

Specifies type of text truncation if it doesn't fit in the column.  Currently
three types are supported:
.RS 2
.IP \- 2
truncation \- text is truncated

.EX
  set viewcolumns=\-{name}.
.EE

results in truncation of names that are too long too fit in the view.
.IP \- 2
adding of ellipsis \- ellipsis on the left or right are added when needed

.EX
  set viewcolumns=\-{name}..
.EE

results in that ellipsis are added at the end of too long file names.
.IP \- 2
none (default) \- text can pass column boundaries

.EX
  set viewcolumns=\-{name}...,{ext}
.EE

results in that long file names can partially be written on the ext column.
.RE
.\" ---------------------------------------------------------------------------
.SH Color schemes
.\" ---------------------------------------------------------------------------
The color schemes in vifm can be applied in two different ways:
.RS 2
.IP \- 2
as the primary color scheme;
.IP \- 2
as local to a pane color scheme.
.RE

Both types are set using :colorscheme command, but of different forms:
.RS 2
.IP \- 2
:colorscheme color_scheme_name \- for the primary color scheme;
.IP \- 2
:colorscheme color_scheme_name directory \- for local color schemes.
.RE

Look of different parts of the TUI (Text User Interface) is determined in \
this way:
.RS 2
.IP \- 2
Border, TopLineSel, TopLine, CmdLine, ErrorMsg, StatusLine, JobLine, \
SuggestBox and WildMenu are always determined by the primary color scheme;
.IP \- 2
CurrLine, Selected, Directory, Link, BrokenLink, Socket, Device, Executable, \
Fifo and Win are determined by primary color scheme and a set of local \
color schemes, which can be empty.
.RE

There might be a set of local color schemes because they are structured
hierarchically according to file system structure. For example, having the
following piece of file system:
.EX

  ~
  `\-\- bin
     |
     `\-\- my

.EE
Two color schemes:
.EX

  # ~/.vifm/colors/for_bin
  highlight Win cterm=none ctermfg=white ctermbg=red
  highlight CurrLine cterm=none ctermfg=red ctermbg=black

  # ~/.vifm/colors/for_bin_my
  highlight CurrLine cterm=none ctermfg=green ctermbg=black

.EE
And these three commands in the vifmrc file:
.EX

  colorscheme Default
  colorscheme for_bin ~/bin
  colorscheme for_bin_my ~/bin/my

.EE
File list will look in the following way for each level:
.IP \- 2
~/ \- Default color scheme
.br
black background
.br
cursor with blue background
.IP \- 2
~/bin/ \- mix of Default and for_bin color schemes
.br
red background
.br
cursor with black background and red foreground
.IP \- 2
~/bin/my/ \- mix of Default, for_bin and for_bin_my color schemes
.br
red background
.br
cursor with black background and green foreground
.\" ---------------------------------------------------------------------------
.SH Trash directory
.\" ---------------------------------------------------------------------------
vifm has support of trash directory, which is used as temporary storage for
deleted files or files that were cut.  Using trash is controlled by the
\(aqtrash\(aq option, and exact path to the trash can be set with 'trashdir'
option.  Trash directory in vifm differs from the system-wide one by default,
because of possible incompatibilities of storing deleted files among different
file managers.  But one can set 'trashdir' to "~/.local/share/Trash" to use a
"standard" trash directory.

There are two scenarios of using trash in vifm:
.RS 2
.IP 1. 3
As a place for storing files that were cut by "d" and may be inserted to some
other place in file system.
.IP 2. 3
As a storage of files, that are deleted but not purged yet.
.RE

The first scenario uses deletion ("d") operations to put files to trash and
put ("p") operations to restore files from trash directory.  Note that such
operations move files to and from trash directory, which can be long term
operations in case of different partitions or remote drives mounted locally.

The second scenario uses deletion ("d") operations for moving files to trash
directory and :empty command-line command to purge all previously deleted files.

Deletion and put operations depend on registers, which can point to files in
trash directory.  Normally, there are no nonexistent files in registers, but
vifm doesn't keep track of modifications under trash directory, so one
shouldn't expect value of registers to be absolutely correct if trash
directory was modified not by operation that are meant for it.  But this
won't lead to any issues with operations, since they ignore nonexistent
files.
.\" ---------------------------------------------------------------------------
.SH Client\-Server
.\" ---------------------------------------------------------------------------
vifm supports remote execution of command-line mode commands as well as remote
changing of directories.  This is possible using \-\-remote command-line
argument.

To execute a command remotely combine \-\-remote argument with \-c <command> or
+<command>.  For example:

.EX
  vifm \-\-remote \-c 'cd /'
  vifm \-\-remote '+cd /'
.EE

To change directory not using command-line mode commands one can specify paths
right after \-\-remote argument, like this:

.EX
  vifm \-\-remote /
  vifm \-\-remote ~
  vifm \-\-remote /usr/bin /tmp
.EE

If there are several running instances, the target can be specified with
\-\-server\-name option (otherwise, the first one lexicographically is used):

.EX
  vifm \-\-server-name work \-\-remote ~/work/project
.EE

List of names of running instances can be obtained via \-\-server\-list option.
Name of the current one is available via v:servername.

.TP
.BI "v:servername"
server name of the running vifm instance.  Empty if client-server feature is
disabled.
.\" ---------------------------------------------------------------------------
.SH Plugin
.\" ---------------------------------------------------------------------------
Plugin for using vifm in vim as a file selector.

Commands:

  :EditVifm   select a file or files to open in the current buffer.
  :SplitVifm  split buffer and select a file or files to open.
  :VsplitVifm vertically split buffer and select a file or files to open.
  :DiffVifm   select a file or files to compare to the current file with
              :vert diffsplit.
  :TabVifm    select a file or files to open in tabs.

Each command accepts up to two arguments: left pane directory and right pane
directory.  After arguments are checked, vifm process is spawned in a special
"file-picker" mode.  To pick files just open them either by pressing l, i or
Enter keys, or by running :edit command.  If no files are selected, file
under the cursor is opened, otherwise whole selection is passed to the plugin
and opened in vim.

The plugin have only two settings.  It's a string variable named g:vifm_term to
let user specify command to run GUI terminal.  By default it's equal to
\(aqxterm \-e\(aq.  And another string variable named g:vifm_exec, which equals
"vifm" by default and specifies path to vifm's executable.  To pass arguments to
vifm use g:vifm_exec_args, which is empty by default.

To use the plugin copy the vifm.vim file to either the system wide vim/plugin
directory or into ~/.vim/plugin.

If you would prefer not to use the plugin and it is in the system wide plugin
directory add

let loaded_vifm=1

to your ~/.vimrc file.
.\" ---------------------------------------------------------------------------
.SH Reserved
.\" ---------------------------------------------------------------------------

The following command names are reserved and shouldn't be used for user
commands.

  g[lobal]
  v[global]
.\" ---------------------------------------------------------------------------
.SH ENVIRONMENT
.\" ---------------------------------------------------------------------------
.TP
.BI VIFM
Points to main configuration directory (usually ~/.vifm/).
.TP
.BI MYVIFMRC
Points to main configuration file (usually ~/.vifm/vifmrc).
.LP
These environment variables are valid inside vifm and also can be used to
configure it by setting some of them before running vifm.
.LP
When $MYVIFMRC isn't set, it's made as $VIFM/vifmrc (exception
for Windows: vifmrc in the same directory as vifm.exe has higher priority than
$VIFM/vifmrc).
.LP
See "Startup" section above for more details.
.TP
.BI VIFM_FUSE_FILE
On execution of external commands this variable is set to the full path of file
used to initiate FUSE mount of the closes mount point from current pane
directory up.  It's not set when outside FUSE mount point.  When vifm is used
inside terminal multiplexer, it tries to set this variable as well (it doesn't
work this way on its own).
.\" ---------------------------------------------------------------------------
.SH SEE ALSO
.\" ---------------------------------------------------------------------------
.BR vifm-convert-dircolors (1),
.BR vifm-pause (1)

Website: https://vifm.info/
.br
Wiki: https://wiki.vifm.info/

Esperanto translation of the documentation by Sebastian Cyprych:
.br
http://cyprych.neostrada.pl/tekstoj/komputiloj/vifm-help.eo.html
.\" ---------------------------------------------------------------------------
.SH AUTHOR
.\" ---------------------------------------------------------------------------
Vifm was written by ksteen <ksteen@users.sourceforge.net>
.br
And currently is developed by xaizek <xaizek@openmailbox.org>
